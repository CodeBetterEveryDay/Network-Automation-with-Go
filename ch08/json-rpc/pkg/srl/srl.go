/*
Package srl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/mk/go/pkg/mod/github.com/openconfig/ygot@v0.16.2/genutil/names.go
using the following YANG input files:
	- yang/interfaces/srl_nokia-interfaces.yang
	- yang/interfaces/srl_nokia-if-ip.yang
Imported modules were sourced from:
	- yang/...
*/
package srl

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// SrlNokiaInterfaces_Interface represents the /srl_nokia-interfaces/interface YANG schema element.
type SrlNokiaInterfaces_Interface struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	BreakoutMode	*SrlNokiaInterfaces_Interface_BreakoutMode	`path:"breakout-mode" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Ethernet	*SrlNokiaInterfaces_Interface_Ethernet	`path:"ethernet" module:"srl_nokia-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	LoopbackMode	*bool	`path:"loopback-mode" module:"srl_nokia-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_PortOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Subinterface	map[uint32]*SrlNokiaInterfaces_Interface_Subinterface	`path:"subinterface" module:"srl_nokia-interfaces"`
	TrafficRate	*SrlNokiaInterfaces_Interface_TrafficRate	`path:"traffic-rate" module:"srl_nokia-interfaces"`
	Transceiver	*SrlNokiaInterfaces_Interface_Transceiver	`path:"transceiver" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// SrlNokiaInterfaces_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface) NewSubinterface(Index uint32) (*SrlNokiaInterfaces_Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*SrlNokiaInterfaces_Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &SrlNokiaInterfaces_Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_BreakoutMode represents the /srl_nokia-interfaces/interface/breakout-mode YANG schema element.
type SrlNokiaInterfaces_Interface_BreakoutMode struct {
	ChannelSpeed	E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed	`path:"channel-speed" module:"srl_nokia-interfaces"`
	NumChannels	*uint8	`path:"num-channels" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_BreakoutMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet represents the /srl_nokia-interfaces/interface/ethernet YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet struct {
	AggregateId	*string	`path:"aggregate-id" module:"srl_nokia-interfaces"`
	AutoNegotiate	*bool	`path:"auto-negotiate" module:"srl_nokia-interfaces"`
	DuplexMode	E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode	`path:"duplex-mode" module:"srl_nokia-interfaces"`
	FlowControl	*SrlNokiaInterfaces_Interface_Ethernet_FlowControl	`path:"flow-control" module:"srl_nokia-interfaces"`
	HoldTime	*SrlNokiaInterfaces_Interface_Ethernet_HoldTime	`path:"hold-time" module:"srl_nokia-interfaces"`
	HwMacAddress	*string	`path:"hw-mac-address" module:"srl_nokia-interfaces"`
	LacpPortPriority	*uint16	`path:"lacp-port-priority" module:"srl_nokia-interfaces"`
	PhysicalMedium	E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium	`path:"physical-medium" module:"srl_nokia-interfaces"`
	PortSpeed	E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed	`path:"port-speed" module:"srl_nokia-interfaces"`
	ReloadDelay	*uint32	`path:"reload-delay" module:"srl_nokia-interfaces"`
	ReloadDelayExpires	*string	`path:"reload-delay-expires" module:"srl_nokia-interfaces"`
	StandbySignaling	E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling	`path:"standby-signaling" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Ethernet_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	StormControl	*SrlNokiaInterfaces_Interface_Ethernet_StormControl	`path:"storm-control" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_FlowControl represents the /srl_nokia-interfaces/interface/ethernet/flow-control YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_FlowControl struct {
	Receive	*bool	`path:"receive" module:"srl_nokia-interfaces"`
	Transmit	*bool	`path:"transmit" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_FlowControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_FlowControl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_FlowControl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_FlowControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_FlowControl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_HoldTime represents the /srl_nokia-interfaces/interface/ethernet/hold-time YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_HoldTime struct {
	Down	*uint32	`path:"down" module:"srl_nokia-interfaces"`
	DownExpires	*string	`path:"down-expires" module:"srl_nokia-interfaces"`
	Up	*uint32	`path:"up" module:"srl_nokia-interfaces"`
	UpExpires	*string	`path:"up-expires" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_Statistics represents the /srl_nokia-interfaces/interface/ethernet/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_Statistics struct {
	In_1024BTo_1518BFrames	*uint64	`path:"in-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	In_128BTo_255BFrames	*uint64	`path:"in-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	In_1519BOrLongerFrames	*uint64	`path:"in-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	In_256BTo_511BFrames	*uint64	`path:"in-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	In_512BTo_1023BFrames	*uint64	`path:"in-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	In_64BFrames	*uint64	`path:"in-64b-frames" module:"srl_nokia-interfaces"`
	In_65BTo_127BFrames	*uint64	`path:"in-65b-to-127b-frames" module:"srl_nokia-interfaces"`
	InCrcErrorFrames	*uint64	`path:"in-crc-error-frames" module:"srl_nokia-interfaces"`
	InFragmentFrames	*uint64	`path:"in-fragment-frames" module:"srl_nokia-interfaces"`
	InJabberFrames	*uint64	`path:"in-jabber-frames" module:"srl_nokia-interfaces"`
	InMacPauseFrames	*uint64	`path:"in-mac-pause-frames" module:"srl_nokia-interfaces"`
	InOversizeFrames	*uint64	`path:"in-oversize-frames" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	Out_1024BTo_1518BFrames	*uint64	`path:"out-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	Out_128BTo_255BFrames	*uint64	`path:"out-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	Out_1519BOrLongerFrames	*uint64	`path:"out-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	Out_256BTo_511BFrames	*uint64	`path:"out-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	Out_512BTo_1023BFrames	*uint64	`path:"out-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	Out_64BFrames	*uint64	`path:"out-64b-frames" module:"srl_nokia-interfaces"`
	Out_65BTo_127BFrames	*uint64	`path:"out-65b-to-127b-frames" module:"srl_nokia-interfaces"`
	OutMacPauseFrames	*uint64	`path:"out-mac-pause-frames" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_StormControl represents the /srl_nokia-interfaces/interface/ethernet/storm-control YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_StormControl struct {
	BroadcastRate	*uint32	`path:"broadcast-rate" module:"srl_nokia-interfaces"`
	MulticastRate	*uint32	`path:"multicast-rate" module:"srl_nokia-interfaces"`
	OperationalBroadcastRate	*uint32	`path:"operational-broadcast-rate" module:"srl_nokia-interfaces"`
	OperationalMulticastRate	*uint32	`path:"operational-multicast-rate" module:"srl_nokia-interfaces"`
	OperationalUnknownUnicastRate	*uint32	`path:"operational-unknown-unicast-rate" module:"srl_nokia-interfaces"`
	Units	E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units	`path:"units" module:"srl_nokia-interfaces"`
	UnknownUnicastRate	*uint32	`path:"unknown-unicast-rate" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_StormControl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_StormControl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_StormControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_StormControl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Statistics represents the /srl_nokia-interfaces/interface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Statistics struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"srl_nokia-interfaces"`
	InBroadcastPackets	*uint64	`path:"in-broadcast-packets" module:"srl_nokia-interfaces"`
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InFcsErrorPackets	*uint64	`path:"in-fcs-error-packets" module:"srl_nokia-interfaces"`
	InMulticastPackets	*uint64	`path:"in-multicast-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InUnicastPackets	*uint64	`path:"in-unicast-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutBroadcastPackets	*uint64	`path:"out-broadcast-packets" module:"srl_nokia-interfaces"`
	OutDiscardedPackets	*uint64	`path:"out-discarded-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutMirrorOctets	*uint64	`path:"out-mirror-octets" module:"srl_nokia-interfaces"`
	OutMirrorPackets	*uint64	`path:"out-mirror-packets" module:"srl_nokia-interfaces"`
	OutMulticastPackets	*uint64	`path:"out-multicast-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutUnicastPackets	*uint64	`path:"out-unicast-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface represents the /srl_nokia-interfaces/interface/subinterface YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	AnycastGw	*SrlNokiaInterfaces_Interface_Subinterface_AnycastGw	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	BridgeTable	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable	`path:"bridge-table" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"srl_nokia-interfaces"`
	Index	*uint32	`path:"index" module:"srl_nokia-interfaces"`
	IpMtu	*uint16	`path:"ip-mtu" module:"srl_nokia-interfaces"`
	Ipv4	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4	`path:"ipv4" module:"srl_nokia-interfaces"`
	Ipv6	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6	`path:"ipv6" module:"srl_nokia-interfaces"`
	L2Mtu	*uint16	`path:"l2-mtu" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	Mpls	*SrlNokiaInterfaces_Interface_Subinterface_Mpls	`path:"mpls" module:"srl_nokia-interfaces"`
	MplsMtu	*uint16	`path:"mpls-mtu" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_SubifOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_Subinterface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Subinterface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Type	E_SrlNokiaInterfaces_SiType	`path:"type" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_AnycastGw represents the /srl_nokia-interfaces/interface/subinterface/anycast-gw YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_AnycastGw struct {
	AnycastGwMac	*string	`path:"anycast-gw-mac" module:"srl_nokia-interfaces"`
	AnycastGwMacOrigin	E_SrlNokiaIfIp_AnycastGwMacOrigin	`path:"anycast-gw-mac-origin" module:"srl_nokia-interfaces"`
	VirtualRouterId	*uint8	`path:"virtual-router-id" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_AnycastGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_AnycastGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable represents the /srl_nokia-interfaces/interface/subinterface/bridge-table YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable struct {
	DiscardUnknownSrcMac	*bool	`path:"discard-unknown-src-mac" module:"srl_nokia-interfaces"`
	MacDuplication	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication	`path:"mac-duplication" module:"srl_nokia-interfaces"`
	MacLearning	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning	`path:"mac-learning" module:"srl_nokia-interfaces"`
	MacLimit	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit	`path:"mac-limit" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-duplication YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication struct {
	Action	E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action	`path:"action" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-learning YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning struct {
	AdminState	E_SrlNokiaInterfacesBridgeTable_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	Aging	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging	`path:"aging" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-learning/aging YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging struct {
	AdminState	E_SrlNokiaInterfacesBridgeTable_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-limit YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit struct {
	MaximumEntries	*int32	`path:"maximum-entries" module:"srl_nokia-interfaces"`
	WarningThresholdPct	*int32	`path:"warning-threshold-pct" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4 represents the /srl_nokia-interfaces/interface/subinterface/ipv4 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address	`path:"address" module:"srl_nokia-interfaces"`
	AllowDirectedBroadcast	*bool	`path:"allow-directed-broadcast" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) NewAddress(IpPrefix string) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address{
		IpPrefix: &IpPrefix,
	}

	return t.Address[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv4/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address struct {
	AnycastGw	*bool	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
	Primary	YANGEmpty	`path:"primary" module:"srl_nokia-interfaces"`
	Status	E_SrlNokiaIfIp_Ipv4AddressStatus	`path:"status" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6 represents the /srl_nokia-interfaces/interface/subinterface/ipv6 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address	`path:"address" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) NewAddress(IpPrefix string) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address{
		IpPrefix: &IpPrefix,
	}

	return t.Address[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv6/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address struct {
	AnycastGw	*bool	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
	Primary	YANGEmpty	`path:"primary" module:"srl_nokia-interfaces"`
	Status	E_SrlNokiaIfIp_Ipv6AddressStatus	`path:"status" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Mpls represents the /srl_nokia-interfaces/interface/subinterface/mpls YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Mpls struct {
	Statistics	*SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Mpls) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics represents the /srl_nokia-interfaces/interface/subinterface/mpls/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics struct {
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InForwardedOctets	*uint64	`path:"in-forwarded-octets" module:"srl_nokia-interfaces"`
	InForwardedPackets	*uint64	`path:"in-forwarded-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutForwardedOctets	*uint64	`path:"out-forwarded-octets" module:"srl_nokia-interfaces"`
	OutForwardedPackets	*uint64	`path:"out-forwarded-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Statistics represents the /srl_nokia-interfaces/interface/subinterface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Statistics struct {
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InForwardedOctets	*uint64	`path:"in-forwarded-octets" module:"srl_nokia-interfaces"`
	InForwardedPackets	*uint64	`path:"in-forwarded-packets" module:"srl_nokia-interfaces"`
	InMatchedRaPackets	*uint64	`path:"in-matched-ra-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-interfaces"`
	InTerminatedOctets	*uint64	`path:"in-terminated-octets" module:"srl_nokia-interfaces"`
	InTerminatedPackets	*uint64	`path:"in-terminated-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutDiscardedPackets	*uint64	`path:"out-discarded-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutForwardedOctets	*uint64	`path:"out-forwarded-octets" module:"srl_nokia-interfaces"`
	OutForwardedPackets	*uint64	`path:"out-forwarded-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutOriginatedOctets	*uint64	`path:"out-originated-octets" module:"srl_nokia-interfaces"`
	OutOriginatedPackets	*uint64	`path:"out-originated-packets" module:"srl_nokia-interfaces"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_TrafficRate represents the /srl_nokia-interfaces/interface/traffic-rate YANG schema element.
type SrlNokiaInterfaces_Interface_TrafficRate struct {
	InBps	*uint64	`path:"in-bps" module:"srl_nokia-interfaces"`
	OutBps	*uint64	`path:"out-bps" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_TrafficRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_TrafficRate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_TrafficRate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_TrafficRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_TrafficRate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver represents the /srl_nokia-interfaces/interface/transceiver YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver struct {
	Channel	map[uint8]*SrlNokiaInterfaces_Interface_Transceiver_Channel	`path:"channel" module:"srl_nokia-interfaces"`
	ConnectorType	E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType	`path:"connector-type" module:"srl_nokia-interfaces"`
	DateCode	*string	`path:"date-code" module:"srl_nokia-interfaces"`
	DdmEvents	*bool	`path:"ddm-events" module:"srl_nokia-interfaces"`
	EthernetPmd	*string	`path:"ethernet-pmd" module:"srl_nokia-interfaces"`
	FaultCondition	*bool	`path:"fault-condition" module:"srl_nokia-interfaces"`
	FormFactor	E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor	`path:"form-factor" module:"srl_nokia-interfaces"`
	ForwardErrorCorrection	E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection	`path:"forward-error-correction" module:"srl_nokia-interfaces"`
	InputPower	*SrlNokiaInterfaces_Interface_Transceiver_InputPower	`path:"input-power" module:"srl_nokia-interfaces"`
	LaserBiasCurrent	*SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent	`path:"laser-bias-current" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_TransceiverOperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	OutputPower	*SrlNokiaInterfaces_Interface_Transceiver_OutputPower	`path:"output-power" module:"srl_nokia-interfaces"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-interfaces"`
	Temperature	*SrlNokiaInterfaces_Interface_Transceiver_Temperature	`path:"temperature" module:"srl_nokia-interfaces"`
	TxLaser	*bool	`path:"tx-laser" module:"srl_nokia-interfaces"`
	Vendor	*string	`path:"vendor" module:"srl_nokia-interfaces"`
	VendorPartNumber	*string	`path:"vendor-part-number" module:"srl_nokia-interfaces"`
	VendorRevision	*string	`path:"vendor-revision" module:"srl_nokia-interfaces"`
	Voltage	*SrlNokiaInterfaces_Interface_Transceiver_Voltage	`path:"voltage" module:"srl_nokia-interfaces"`
	Wavelength	*float64	`path:"wavelength" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// SrlNokiaInterfaces_Interface_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Transceiver) NewChannel(Index uint8) (*SrlNokiaInterfaces_Interface_Transceiver_Channel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint8]*SrlNokiaInterfaces_Interface_Transceiver_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &SrlNokiaInterfaces_Interface_Transceiver_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel represents the /srl_nokia-interfaces/interface/transceiver/channel YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel struct {
	Index	*uint8	`path:"index" module:"srl_nokia-interfaces"`
	InputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower	`path:"input-power" module:"srl_nokia-interfaces"`
	LaserBiasCurrent	*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent	`path:"laser-bias-current" module:"srl_nokia-interfaces"`
	OutputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower	`path:"output-power" module:"srl_nokia-interfaces"`
	Wavelength	*float64	`path:"wavelength" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Transceiver_Channel struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/input-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent represents the /srl_nokia-interfaces/interface/transceiver/channel/laser-bias-current YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/output-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_InputPower represents the /srl_nokia-interfaces/interface/transceiver/input-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_InputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_InputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_InputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent represents the /srl_nokia-interfaces/interface/transceiver/laser-bias-current YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_OutputPower represents the /srl_nokia-interfaces/interface/transceiver/output-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_OutputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_OutputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Temperature represents the /srl_nokia-interfaces/interface/transceiver/temperature YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Temperature struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*int16	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*int16	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*int16	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*int16	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*int16	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Voltage represents the /srl_nokia-interfaces/interface/transceiver/voltage YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Voltage struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Voltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Voltage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Voltage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Voltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Voltage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_SrlNokiaIfIp_AddressOrigin is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_AddressOrigin. An additional value named
// SrlNokiaIfIp_AddressOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_AddressOrigin int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_AddressOrigin implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_AddressOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_AddressOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_AddressOrigin.
func (E_SrlNokiaIfIp_AddressOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_AddressOrigin.
func (e E_SrlNokiaIfIp_AddressOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_AddressOrigin")
}

const (
	// SrlNokiaIfIp_AddressOrigin_UNSET corresponds to the value UNSET of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_UNSET E_SrlNokiaIfIp_AddressOrigin = 0
	// SrlNokiaIfIp_AddressOrigin_other corresponds to the value other of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_other E_SrlNokiaIfIp_AddressOrigin = 2
	// SrlNokiaIfIp_AddressOrigin_static corresponds to the value static of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_static E_SrlNokiaIfIp_AddressOrigin = 3
	// SrlNokiaIfIp_AddressOrigin_dhcp corresponds to the value dhcp of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_dhcp E_SrlNokiaIfIp_AddressOrigin = 4
	// SrlNokiaIfIp_AddressOrigin_link_layer corresponds to the value link_layer of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_link_layer E_SrlNokiaIfIp_AddressOrigin = 5
	// SrlNokiaIfIp_AddressOrigin_random corresponds to the value random of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_random E_SrlNokiaIfIp_AddressOrigin = 6
)


// E_SrlNokiaIfIp_AnycastGwMacOrigin is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_AnycastGwMacOrigin. An additional value named
// SrlNokiaIfIp_AnycastGwMacOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_AnycastGwMacOrigin int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_AnycastGwMacOrigin implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_AnycastGwMacOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_AnycastGwMacOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_AnycastGwMacOrigin.
func (E_SrlNokiaIfIp_AnycastGwMacOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_AnycastGwMacOrigin.
func (e E_SrlNokiaIfIp_AnycastGwMacOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_AnycastGwMacOrigin")
}

const (
	// SrlNokiaIfIp_AnycastGwMacOrigin_UNSET corresponds to the value UNSET of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_UNSET E_SrlNokiaIfIp_AnycastGwMacOrigin = 0
	// SrlNokiaIfIp_AnycastGwMacOrigin_configured corresponds to the value configured of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_configured E_SrlNokiaIfIp_AnycastGwMacOrigin = 2
	// SrlNokiaIfIp_AnycastGwMacOrigin_vrid_auto_derived corresponds to the value vrid_auto_derived of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_vrid_auto_derived E_SrlNokiaIfIp_AnycastGwMacOrigin = 3
)


// E_SrlNokiaIfIp_Ipv4AddressStatus is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_Ipv4AddressStatus. An additional value named
// SrlNokiaIfIp_Ipv4AddressStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_Ipv4AddressStatus int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_Ipv4AddressStatus implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_Ipv4AddressStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_Ipv4AddressStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_Ipv4AddressStatus.
func (E_SrlNokiaIfIp_Ipv4AddressStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_Ipv4AddressStatus.
func (e E_SrlNokiaIfIp_Ipv4AddressStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_Ipv4AddressStatus")
}

const (
	// SrlNokiaIfIp_Ipv4AddressStatus_UNSET corresponds to the value UNSET of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_UNSET E_SrlNokiaIfIp_Ipv4AddressStatus = 0
	// SrlNokiaIfIp_Ipv4AddressStatus_preferred corresponds to the value preferred of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_preferred E_SrlNokiaIfIp_Ipv4AddressStatus = 2
	// SrlNokiaIfIp_Ipv4AddressStatus_inaccessible corresponds to the value inaccessible of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_inaccessible E_SrlNokiaIfIp_Ipv4AddressStatus = 3
	// SrlNokiaIfIp_Ipv4AddressStatus_tentative corresponds to the value tentative of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_tentative E_SrlNokiaIfIp_Ipv4AddressStatus = 4
	// SrlNokiaIfIp_Ipv4AddressStatus_duplicate corresponds to the value duplicate of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_duplicate E_SrlNokiaIfIp_Ipv4AddressStatus = 5
)


// E_SrlNokiaIfIp_Ipv6AddressStatus is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_Ipv6AddressStatus. An additional value named
// SrlNokiaIfIp_Ipv6AddressStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_Ipv6AddressStatus int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_Ipv6AddressStatus implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_Ipv6AddressStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_Ipv6AddressStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_Ipv6AddressStatus.
func (E_SrlNokiaIfIp_Ipv6AddressStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_Ipv6AddressStatus.
func (e E_SrlNokiaIfIp_Ipv6AddressStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_Ipv6AddressStatus")
}

const (
	// SrlNokiaIfIp_Ipv6AddressStatus_UNSET corresponds to the value UNSET of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_UNSET E_SrlNokiaIfIp_Ipv6AddressStatus = 0
	// SrlNokiaIfIp_Ipv6AddressStatus_preferred corresponds to the value preferred of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_preferred E_SrlNokiaIfIp_Ipv6AddressStatus = 2
	// SrlNokiaIfIp_Ipv6AddressStatus_deprecated corresponds to the value deprecated of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_deprecated E_SrlNokiaIfIp_Ipv6AddressStatus = 3
	// SrlNokiaIfIp_Ipv6AddressStatus_invalid corresponds to the value invalid of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_invalid E_SrlNokiaIfIp_Ipv6AddressStatus = 4
	// SrlNokiaIfIp_Ipv6AddressStatus_inaccessible corresponds to the value inaccessible of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_inaccessible E_SrlNokiaIfIp_Ipv6AddressStatus = 5
	// SrlNokiaIfIp_Ipv6AddressStatus_unknown corresponds to the value unknown of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_unknown E_SrlNokiaIfIp_Ipv6AddressStatus = 6
	// SrlNokiaIfIp_Ipv6AddressStatus_tentative corresponds to the value tentative of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_tentative E_SrlNokiaIfIp_Ipv6AddressStatus = 7
	// SrlNokiaIfIp_Ipv6AddressStatus_duplicate corresponds to the value duplicate of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_duplicate E_SrlNokiaIfIp_Ipv6AddressStatus = 8
	// SrlNokiaIfIp_Ipv6AddressStatus_optimistic corresponds to the value optimistic of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_optimistic E_SrlNokiaIfIp_Ipv6AddressStatus = 9
)


// E_SrlNokiaInterfacesBridgeTable_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfacesBridgeTable_AdminState. An additional value named
// SrlNokiaInterfacesBridgeTable_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfacesBridgeTable_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaInterfacesBridgeTable_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfacesBridgeTable_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfacesBridgeTable_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfacesBridgeTable_AdminState.
func (E_SrlNokiaInterfacesBridgeTable_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfacesBridgeTable_AdminState.
func (e E_SrlNokiaInterfacesBridgeTable_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfacesBridgeTable_AdminState")
}

const (
	// SrlNokiaInterfacesBridgeTable_AdminState_UNSET corresponds to the value UNSET of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_UNSET E_SrlNokiaInterfacesBridgeTable_AdminState = 0
	// SrlNokiaInterfacesBridgeTable_AdminState_enable corresponds to the value enable of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_enable E_SrlNokiaInterfacesBridgeTable_AdminState = 2
	// SrlNokiaInterfacesBridgeTable_AdminState_disable corresponds to the value disable of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_disable E_SrlNokiaInterfacesBridgeTable_AdminState = 3
)


// E_SrlNokiaInterfaces_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_AdminState. An additional value named
// SrlNokiaInterfaces_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_AdminState.
func (E_SrlNokiaInterfaces_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_AdminState.
func (e E_SrlNokiaInterfaces_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_AdminState")
}

const (
	// SrlNokiaInterfaces_AdminState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_UNSET E_SrlNokiaInterfaces_AdminState = 0
	// SrlNokiaInterfaces_AdminState_enable corresponds to the value enable of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_enable E_SrlNokiaInterfaces_AdminState = 2
	// SrlNokiaInterfaces_AdminState_disable corresponds to the value disable of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_disable E_SrlNokiaInterfaces_AdminState = 3
)


// E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed. An additional value named
// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed.
func (E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed.
func (e E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed")
}

const (
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 0
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_10G corresponds to the value 10G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_10G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 1
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_25G corresponds to the value 25G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_25G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 2
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_50G corresponds to the value 50G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_50G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 3
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_100G corresponds to the value 100G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_100G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 4
)


// E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_DuplexMode. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_DuplexMode implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_DuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_DuplexMode.
func (E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 0
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_full corresponds to the value full of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_full E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 1
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_half corresponds to the value half of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_half E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 2
)


// E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium
	SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium = 0
	// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_1000BASE_T corresponds to the value 1000BASE_T of SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium
	SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_1000BASE_T E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium = 1
)


// E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_PortSpeed. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_PortSpeed implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_PortSpeed can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_PortSpeed.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 0
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10M corresponds to the value 10M of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10M E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 1
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100M corresponds to the value 100M of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100M E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 2
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1G corresponds to the value 1G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 3
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10G corresponds to the value 10G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 4
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_25G corresponds to the value 25G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_25G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 5
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_40G corresponds to the value 40G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_40G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 6
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_50G corresponds to the value 50G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_50G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 7
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100G corresponds to the value 100G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 8
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_200G corresponds to the value 200G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_200G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 9
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_400G corresponds to the value 400G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_400G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 10
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1T corresponds to the value 1T of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1T E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 11
)


// E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 0
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_power_off corresponds to the value power_off of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_power_off E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 1
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_lacp corresponds to the value lacp of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_lacp E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 2
)


// E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 0
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_kbps corresponds to the value kbps of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_kbps E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 1
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_percentage corresponds to the value percentage of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_percentage E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 2
)


// E_SrlNokiaInterfaces_Interface_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_OperState. An additional value named
// SrlNokiaInterfaces_Interface_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_OperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_OperState.
func (E_SrlNokiaInterfaces_Interface_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_OperState.
func (e E_SrlNokiaInterfaces_Interface_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_OperState")
}

const (
	// SrlNokiaInterfaces_Interface_OperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_UNSET E_SrlNokiaInterfaces_Interface_OperState = 0
	// SrlNokiaInterfaces_Interface_OperState_up corresponds to the value up of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_up E_SrlNokiaInterfaces_Interface_OperState = 1
	// SrlNokiaInterfaces_Interface_OperState_down corresponds to the value down of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_down E_SrlNokiaInterfaces_Interface_OperState = 2
)


// E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action. An additional value named
// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action.
func (E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action.
func (e E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action")
}

const (
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 0
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_use_net_instance_action corresponds to the value use_net_instance_action of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_use_net_instance_action E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 1
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_stop_learning corresponds to the value stop_learning of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_stop_learning E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 2
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_blackhole corresponds to the value blackhole of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_blackhole E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 3
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_oper_down corresponds to the value oper_down of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_oper_down E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 4
)


// E_SrlNokiaInterfaces_Interface_Subinterface_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Subinterface_OperState. An additional value named
// SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Subinterface_OperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Subinterface_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Subinterface_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Subinterface_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Subinterface_OperState.
func (E_SrlNokiaInterfaces_Interface_Subinterface_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Subinterface_OperState.
func (e E_SrlNokiaInterfaces_Interface_Subinterface_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Subinterface_OperState")
}

const (
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 0
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_up corresponds to the value up of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_up E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 1
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_down corresponds to the value down of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_down E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 2
)


// E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_ConnectorType. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_ConnectorType implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_ConnectorType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_ConnectorType.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 0
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SC corresponds to the value SC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 2
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE1_COPPER corresponds to the value FC_STYLE1_COPPER of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE1_COPPER E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 3
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE2_COPPER corresponds to the value FC_STYLE2_COPPER of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE2_COPPER E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 4
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_BNC_OR_TNC corresponds to the value BNC_OR_TNC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_BNC_OR_TNC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 5
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_COAX corresponds to the value FC_COAX of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_COAX E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 6
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FIBER_JACK corresponds to the value FIBER_JACK of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FIBER_JACK E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 7
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_LC corresponds to the value LC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_LC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 8
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MT_RJ corresponds to the value MT_RJ of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MT_RJ E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 9
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MU corresponds to the value MU of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MU E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 10
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SG corresponds to the value SG of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SG E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 11
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_OPTICAL_PIGTAIL corresponds to the value OPTICAL_PIGTAIL of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_OPTICAL_PIGTAIL E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 12
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x12 corresponds to the value MPO_1x12 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x12 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 13
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x16 corresponds to the value MPO_2x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 14
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_HSSDC corresponds to the value HSSDC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_HSSDC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 15
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_COPPER_PIGTAIL corresponds to the value COPPER_PIGTAIL of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_COPPER_PIGTAIL E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 16
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_RJ45 corresponds to the value RJ45 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_RJ45 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 17
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_no_separable_connector corresponds to the value no_separable_connector of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_no_separable_connector E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 18
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MXC_2x16 corresponds to the value MXC_2x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MXC_2x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 19
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_CS_OPTICAL_CONNECTOR corresponds to the value CS_OPTICAL_CONNECTOR of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_CS_OPTICAL_CONNECTOR E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 20
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SN_OPTICAL_CONNECTOR corresponds to the value SN_OPTICAL_CONNECTOR of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SN_OPTICAL_CONNECTOR E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 21
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x12 corresponds to the value MPO_2x12 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x12 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 22
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x16 corresponds to the value MPO_1x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 23
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_unknown corresponds to the value unknown of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_unknown E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 24
)


// E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_FormFactor. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_FormFactor implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_FormFactor can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_FormFactor.
func (E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 0
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2 corresponds to the value CFP2 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 2
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2_ACO corresponds to the value CFP2_ACO of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2_ACO E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 3
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP4 corresponds to the value CFP4 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP4 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 4
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP corresponds to the value QSFP of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 5
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPplus corresponds to the value QSFPplus of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPplus E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 6
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP28 corresponds to the value QSFP28 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP28 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 7
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPDD corresponds to the value QSFPDD of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPDD E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 8
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP corresponds to the value SFP of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 9
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFPplus corresponds to the value SFPplus of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFPplus E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 10
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Non_pluggable corresponds to the value Non_pluggable of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Non_pluggable E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 11
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Other corresponds to the value Other of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Other E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 12
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP28 corresponds to the value SFP28 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP28 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 13
)


// E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 0
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_disabled corresponds to the value disabled of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_disabled E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 1
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_528 corresponds to the value rs_528 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_528 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 2
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_544 corresponds to the value rs_544 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_544 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 3
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_base_r corresponds to the value base_r of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_base_r E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 4
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_108 corresponds to the value rs_108 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_108 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 5
)


// E_SrlNokiaInterfaces_PortOperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_PortOperDownReason. An additional value named
// SrlNokiaInterfaces_PortOperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_PortOperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_PortOperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_PortOperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_PortOperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_PortOperDownReason.
func (E_SrlNokiaInterfaces_PortOperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_PortOperDownReason.
func (e E_SrlNokiaInterfaces_PortOperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_PortOperDownReason")
}

const (
	// SrlNokiaInterfaces_PortOperDownReason_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_UNSET E_SrlNokiaInterfaces_PortOperDownReason = 0
	// SrlNokiaInterfaces_PortOperDownReason_port_admin_disabled corresponds to the value port_admin_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_admin_disabled E_SrlNokiaInterfaces_PortOperDownReason = 1
	// SrlNokiaInterfaces_PortOperDownReason_mda_admin_disabled corresponds to the value mda_admin_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_mda_admin_disabled E_SrlNokiaInterfaces_PortOperDownReason = 2
	// SrlNokiaInterfaces_PortOperDownReason_transceiver_laser_disabled corresponds to the value transceiver_laser_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_transceiver_laser_disabled E_SrlNokiaInterfaces_PortOperDownReason = 3
	// SrlNokiaInterfaces_PortOperDownReason_loopback corresponds to the value loopback of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_loopback E_SrlNokiaInterfaces_PortOperDownReason = 4
	// SrlNokiaInterfaces_PortOperDownReason_port_not_present corresponds to the value port_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_not_present E_SrlNokiaInterfaces_PortOperDownReason = 5
	// SrlNokiaInterfaces_PortOperDownReason_mda_not_present corresponds to the value mda_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_mda_not_present E_SrlNokiaInterfaces_PortOperDownReason = 6
	// SrlNokiaInterfaces_PortOperDownReason_transceiver_not_present corresponds to the value transceiver_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_transceiver_not_present E_SrlNokiaInterfaces_PortOperDownReason = 7
	// SrlNokiaInterfaces_PortOperDownReason_phy_initializing corresponds to the value phy_initializing of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_phy_initializing E_SrlNokiaInterfaces_PortOperDownReason = 8
	// SrlNokiaInterfaces_PortOperDownReason_lower_layer_down corresponds to the value lower_layer_down of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lower_layer_down E_SrlNokiaInterfaces_PortOperDownReason = 9
	// SrlNokiaInterfaces_PortOperDownReason_port_mtu_resource_exceeded corresponds to the value port_mtu_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_mtu_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 10
	// SrlNokiaInterfaces_PortOperDownReason_unsupported_speed corresponds to the value unsupported_speed of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_unsupported_speed E_SrlNokiaInterfaces_PortOperDownReason = 11
	// SrlNokiaInterfaces_PortOperDownReason_invalid_transceiver_fec corresponds to the value invalid_transceiver_fec of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_invalid_transceiver_fec E_SrlNokiaInterfaces_PortOperDownReason = 12
	// SrlNokiaInterfaces_PortOperDownReason_other corresponds to the value other of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_other E_SrlNokiaInterfaces_PortOperDownReason = 13
	// SrlNokiaInterfaces_PortOperDownReason_fabric_availability corresponds to the value fabric_availability of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_fabric_availability E_SrlNokiaInterfaces_PortOperDownReason = 14
	// SrlNokiaInterfaces_PortOperDownReason_no_active_links corresponds to the value no_active_links of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_no_active_links E_SrlNokiaInterfaces_PortOperDownReason = 15
	// SrlNokiaInterfaces_PortOperDownReason_min_link_threshold corresponds to the value min_link_threshold of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_min_link_threshold E_SrlNokiaInterfaces_PortOperDownReason = 16
	// SrlNokiaInterfaces_PortOperDownReason_port_9_12_speed_mismatch corresponds to the value port_9_12_speed_mismatch of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_9_12_speed_mismatch E_SrlNokiaInterfaces_PortOperDownReason = 17
	// SrlNokiaInterfaces_PortOperDownReason_lag_resource_exceeded corresponds to the value lag_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lag_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 18
	// SrlNokiaInterfaces_PortOperDownReason_lag_member_resource_exceeded corresponds to the value lag_member_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lag_member_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 19
	// SrlNokiaInterfaces_PortOperDownReason_standby_signaling corresponds to the value standby_signaling of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_standby_signaling E_SrlNokiaInterfaces_PortOperDownReason = 20
	// SrlNokiaInterfaces_PortOperDownReason_interface_hold_time_up_active corresponds to the value interface_hold_time_up_active of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_interface_hold_time_up_active E_SrlNokiaInterfaces_PortOperDownReason = 21
	// SrlNokiaInterfaces_PortOperDownReason_interface_reload_timer_active corresponds to the value interface_reload_timer_active of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_interface_reload_timer_active E_SrlNokiaInterfaces_PortOperDownReason = 22
	// SrlNokiaInterfaces_PortOperDownReason_connector_down corresponds to the value connector_down of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_connector_down E_SrlNokiaInterfaces_PortOperDownReason = 23
)


// E_SrlNokiaInterfaces_SiType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_SiType. An additional value named
// SrlNokiaInterfaces_SiType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_SiType int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_SiType implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_SiType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_SiType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_SiType.
func (E_SrlNokiaInterfaces_SiType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_SiType.
func (e E_SrlNokiaInterfaces_SiType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_SiType")
}

const (
	// SrlNokiaInterfaces_SiType_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_UNSET E_SrlNokiaInterfaces_SiType = 0
	// SrlNokiaInterfaces_SiType_bridged corresponds to the value bridged of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_bridged E_SrlNokiaInterfaces_SiType = 1
	// SrlNokiaInterfaces_SiType_local_mirror_dest corresponds to the value local_mirror_dest of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_local_mirror_dest E_SrlNokiaInterfaces_SiType = 2
	// SrlNokiaInterfaces_SiType_routed corresponds to the value routed of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_routed E_SrlNokiaInterfaces_SiType = 3
)


// E_SrlNokiaInterfaces_SubifOperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_SubifOperDownReason. An additional value named
// SrlNokiaInterfaces_SubifOperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_SubifOperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_SubifOperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_SubifOperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_SubifOperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_SubifOperDownReason.
func (E_SrlNokiaInterfaces_SubifOperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_SubifOperDownReason.
func (e E_SrlNokiaInterfaces_SubifOperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_SubifOperDownReason")
}

const (
	// SrlNokiaInterfaces_SubifOperDownReason_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_UNSET E_SrlNokiaInterfaces_SubifOperDownReason = 0
	// SrlNokiaInterfaces_SubifOperDownReason_admin_disabled corresponds to the value admin_disabled of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_admin_disabled E_SrlNokiaInterfaces_SubifOperDownReason = 1
	// SrlNokiaInterfaces_SubifOperDownReason_port_down corresponds to the value port_down of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_port_down E_SrlNokiaInterfaces_SubifOperDownReason = 2
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_resource_exceeded corresponds to the value ip_mtu_resource_exceeded of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_resource_exceeded E_SrlNokiaInterfaces_SubifOperDownReason = 3
	// SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_resource_exceeded corresponds to the value mpls_mtu_resource_exceeded of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_resource_exceeded E_SrlNokiaInterfaces_SubifOperDownReason = 4
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_too_large corresponds to the value ip_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 5
	// SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_too_large corresponds to the value mpls_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 6
	// SrlNokiaInterfaces_SubifOperDownReason_l2_mtu_too_large corresponds to the value l2_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_l2_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 7
	// SrlNokiaInterfaces_SubifOperDownReason_no_ip_config corresponds to the value no_ip_config of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_no_ip_config E_SrlNokiaInterfaces_SubifOperDownReason = 8
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_larger_than_oper_mac_vrf_mtu corresponds to the value ip_mtu_larger_than_oper_mac_vrf_mtu of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_larger_than_oper_mac_vrf_mtu E_SrlNokiaInterfaces_SubifOperDownReason = 9
	// SrlNokiaInterfaces_SubifOperDownReason_irb_mac_address_not_programmed corresponds to the value irb_mac_address_not_programmed of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_irb_mac_address_not_programmed E_SrlNokiaInterfaces_SubifOperDownReason = 10
	// SrlNokiaInterfaces_SubifOperDownReason_missing_xdp_state corresponds to the value missing_xdp_state of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_missing_xdp_state E_SrlNokiaInterfaces_SubifOperDownReason = 11
	// SrlNokiaInterfaces_SubifOperDownReason_no_underlay_egress_next_hop_resources corresponds to the value no_underlay_egress_next_hop_resources of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_no_underlay_egress_next_hop_resources E_SrlNokiaInterfaces_SubifOperDownReason = 12
	// SrlNokiaInterfaces_SubifOperDownReason_other corresponds to the value other of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_other E_SrlNokiaInterfaces_SubifOperDownReason = 13
)


// E_SrlNokiaInterfaces_TransceiverOperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_TransceiverOperState. An additional value named
// SrlNokiaInterfaces_TransceiverOperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_TransceiverOperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_TransceiverOperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_TransceiverOperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_TransceiverOperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_TransceiverOperState.
func (E_SrlNokiaInterfaces_TransceiverOperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_TransceiverOperState.
func (e E_SrlNokiaInterfaces_TransceiverOperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_TransceiverOperState")
}

const (
	// SrlNokiaInterfaces_TransceiverOperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_UNSET E_SrlNokiaInterfaces_TransceiverOperState = 0
	// SrlNokiaInterfaces_TransceiverOperState_up corresponds to the value up of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_up E_SrlNokiaInterfaces_TransceiverOperState = 1
	// SrlNokiaInterfaces_TransceiverOperState_down corresponds to the value down of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_down E_SrlNokiaInterfaces_TransceiverOperState = 2
	// SrlNokiaInterfaces_TransceiverOperState_not_present corresponds to the value not_present of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_not_present E_SrlNokiaInterfaces_TransceiverOperState = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_SrlNokiaIfIp_AddressOrigin": {
		2: {Name: "other"},
		3: {Name: "static"},
		4: {Name: "dhcp"},
		5: {Name: "link-layer"},
		6: {Name: "random"},
	},
	"E_SrlNokiaIfIp_AnycastGwMacOrigin": {
		2: {Name: "configured"},
		3: {Name: "vrid-auto-derived"},
	},
	"E_SrlNokiaIfIp_Ipv4AddressStatus": {
		2: {Name: "preferred"},
		3: {Name: "inaccessible"},
		4: {Name: "tentative"},
		5: {Name: "duplicate"},
	},
	"E_SrlNokiaIfIp_Ipv6AddressStatus": {
		2: {Name: "preferred"},
		3: {Name: "deprecated"},
		4: {Name: "invalid"},
		5: {Name: "inaccessible"},
		6: {Name: "unknown"},
		7: {Name: "tentative"},
		8: {Name: "duplicate"},
		9: {Name: "optimistic"},
	},
	"E_SrlNokiaInterfacesBridgeTable_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaInterfaces_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed": {
		1: {Name: "10G"},
		2: {Name: "25G"},
		3: {Name: "50G"},
		4: {Name: "100G"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode": {
		1: {Name: "full"},
		2: {Name: "half"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium": {
		1: {Name: "1000BASE-T"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed": {
		1: {Name: "10M"},
		2: {Name: "100M"},
		3: {Name: "1G"},
		4: {Name: "10G"},
		5: {Name: "25G"},
		6: {Name: "40G"},
		7: {Name: "50G"},
		8: {Name: "100G"},
		9: {Name: "200G"},
		10: {Name: "400G"},
		11: {Name: "1T"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling": {
		1: {Name: "power-off"},
		2: {Name: "lacp"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units": {
		1: {Name: "kbps"},
		2: {Name: "percentage"},
	},
	"E_SrlNokiaInterfaces_Interface_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action": {
		1: {Name: "use-net-instance-action"},
		2: {Name: "stop-learning"},
		3: {Name: "blackhole"},
		4: {Name: "oper-down"},
	},
	"E_SrlNokiaInterfaces_Interface_Subinterface_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType": {
		2: {Name: "SC"},
		3: {Name: "FC-STYLE1-COPPER"},
		4: {Name: "FC-STYLE2-COPPER"},
		5: {Name: "BNC-OR-TNC"},
		6: {Name: "FC-COAX"},
		7: {Name: "FIBER-JACK"},
		8: {Name: "LC"},
		9: {Name: "MT-RJ"},
		10: {Name: "MU"},
		11: {Name: "SG"},
		12: {Name: "OPTICAL-PIGTAIL"},
		13: {Name: "MPO-1x12"},
		14: {Name: "MPO-2x16"},
		15: {Name: "HSSDC"},
		16: {Name: "COPPER-PIGTAIL"},
		17: {Name: "RJ45"},
		18: {Name: "no-separable-connector"},
		19: {Name: "MXC-2x16"},
		20: {Name: "CS-OPTICAL-CONNECTOR"},
		21: {Name: "SN-OPTICAL-CONNECTOR"},
		22: {Name: "MPO-2x12"},
		23: {Name: "MPO-1x16"},
		24: {Name: "unknown"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor": {
		2: {Name: "CFP2"},
		3: {Name: "CFP2-ACO"},
		4: {Name: "CFP4"},
		5: {Name: "QSFP"},
		6: {Name: "QSFPplus"},
		7: {Name: "QSFP28"},
		8: {Name: "QSFPDD"},
		9: {Name: "SFP"},
		10: {Name: "SFPplus"},
		11: {Name: "Non-pluggable"},
		12: {Name: "Other"},
		13: {Name: "SFP28"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection": {
		1: {Name: "disabled"},
		2: {Name: "rs-528"},
		3: {Name: "rs-544"},
		4: {Name: "base-r"},
		5: {Name: "rs-108"},
	},
	"E_SrlNokiaInterfaces_PortOperDownReason": {
		1: {Name: "port-admin-disabled"},
		2: {Name: "mda-admin-disabled"},
		3: {Name: "transceiver-laser-disabled"},
		4: {Name: "loopback"},
		5: {Name: "port-not-present"},
		6: {Name: "mda-not-present"},
		7: {Name: "transceiver-not-present"},
		8: {Name: "phy-initializing"},
		9: {Name: "lower-layer-down"},
		10: {Name: "port-mtu-resource-exceeded"},
		11: {Name: "unsupported-speed"},
		12: {Name: "invalid-transceiver-fec"},
		13: {Name: "other"},
		14: {Name: "fabric-availability"},
		15: {Name: "no-active-links"},
		16: {Name: "min-link-threshold"},
		17: {Name: "port-9-12-speed-mismatch"},
		18: {Name: "lag-resource-exceeded"},
		19: {Name: "lag-member-resource-exceeded"},
		20: {Name: "standby-signaling"},
		21: {Name: "interface-hold-time-up-active"},
		22: {Name: "interface-reload-timer-active"},
		23: {Name: "connector-down"},
	},
	"E_SrlNokiaInterfaces_SiType": {
		1: {Name: "bridged", DefiningModule: "srl_nokia-interfaces"},
		2: {Name: "local-mirror-dest", DefiningModule: "srl_nokia-interfaces"},
		3: {Name: "routed", DefiningModule: "srl_nokia-interfaces"},
	},
	"E_SrlNokiaInterfaces_SubifOperDownReason": {
		1: {Name: "admin-disabled"},
		2: {Name: "port-down"},
		3: {Name: "ip-mtu-resource-exceeded"},
		4: {Name: "mpls-mtu-resource-exceeded"},
		5: {Name: "ip-mtu-too-large"},
		6: {Name: "mpls-mtu-too-large"},
		7: {Name: "l2-mtu-too-large"},
		8: {Name: "no-ip-config"},
		9: {Name: "ip-mtu-larger-than-oper-mac-vrf-mtu"},
		10: {Name: "irb-mac-address-not-programmed"},
		11: {Name: "missing-xdp-state"},
		12: {Name: "no-underlay-egress-next-hop-resources"},
		13: {Name: "other"},
	},
	"E_SrlNokiaInterfaces_TransceiverOperState": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "not-present"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x73, 0xdb, 0xb8,
		0x92, 0xf6, 0xf7, 0xfc, 0x0a, 0x1c, 0xed, 0x9e, 0xb2, 0xbc, 0x63, 0xc8, 0x92, 0x2c, 0x5f, 0xb7,
		0x52, 0xb3, 0xc9, 0x4c, 0xe6, 0x6c, 0x6a, 0x93, 0x99, 0xa9, 0x99, 0xbc, 0xfb, 0xe1, 0x58, 0xda,
		0x2c, 0x24, 0x42, 0x12, 0x37, 0x24, 0xa8, 0x05, 0x41, 0xdb, 0x39, 0x89, 0xf7, 0xb7, 0xbf, 0x45,
		0xea, 0x6e, 0xdd, 0x00, 0x90, 0xd4, 0x85, 0x7a, 0x4e, 0xd5, 0x19, 0x27, 0x31, 0x01, 0x92, 0xcd,
		0xee, 0x7e, 0x9e, 0x6e, 0xa0, 0x1b, 0xdf, 0x5e, 0x11, 0x42, 0x48, 0xe9, 0x57, 0xe6, 0xf3, 0xd2,
		0x1d, 0x29, 0x95, 0xce, 0x86, 0x7f, 0xff, 0x0f, 0x57, 0x38, 0xa5, 0x3b, 0x52, 0x1d, 0xfd, 0xf5,
		0xa7, 0x40, 0x74, 0xdd, 0xde, 0xcc, 0x3f, 0xfc, 0xec, 0xca, 0xd2, 0x1d, 0x19, 0x0e, 0x4e, 0xfe,
		0xc1, 0x15, 0x8a, 0xcb, 0x2e, 0xeb, 0xf0, 0xb9, 0x7f, 0x9e, 0x9b, 0x7b, 0x7a, 0xc9, 0xd9, 0xfc,
		0x05, 0xa3, 0x9b, 0xd5, 0x5e, 0xfc, 0xf3, 0xcb, 0x9b, 0x4e, 0x7e, 0xf1, 0xbb, 0xe4, 0x5d, 0xf7,
		0x69, 0xe1, 0x46, 0x73, 0x37, 0x0b, 0xa5, 0xf7, 0x59, 0x04, 0x5f, 0x5c, 0x46, 0xdd, 0xee, 0x8b,
		0xfb, 0x25, 0xd7, 0xfd, 0x19, 0x44, 0x72, 0xc9, 0xc3, 0x4e, 0x9f, 0x89, 0x7f, 0x7d, 0x0c, 0x64,
		0xfc, 0x58, 0xa5, 0xc1, 0xf0, 0x76, 0x67, 0xcb, 0x2f, 0xfc, 0x77, 0x16, 0xbe, 0x91, 0xbd, 0xc8,
		0xe7, 0x42, 0x95, 0xee, 0x88, 0x92, 0x11, 0x5f, 0x71, 0xe1, 0xcc, 0x55, 0xf3, 0x4f, 0xb7, 0x70,
		0xf9, 0xf3, 0xdc, 0xbf, 0x3c, 0xbf, 0x78, 0xfb, 0x97, 0xa2, 0x9f, 0xfc, 0x82, 0x39, 0xbe, 0x2b,
		0x68, 0xa8, 0x98, 0x5a, 0xf3, 0x5e, 0x63, 0xf9, 0xcc, 0x5e, 0xbc, 0xe2, 0x81, 0x7f, 0xe6, 0x5d,
		0x16, 0x79, 0xf1, 0xf3, 0xde, 0x2f, 0xbd, 0x20, 0xb9, 0x88, 0x0b, 0xd6, 0xf6, 0x78, 0x69, 0xe9,
		0x05, 0xad, 0x15, 0x13, 0xcf, 0x2b, 0xd7, 0xc2, 0xaf, 0x57, 0x7d, 0x77, 0x9d, 0xef, 0x6f, 0xaa,
		0x07, 0xba, 0xfa, 0x60, 0xac, 0x17, 0xc6, 0xfa, 0x61, 0xa1, 0x27, 0xcb, 0xf5, 0x65, 0x85, 0xde,
		0x4c, 0xe6, 0xff, 0xf4, 0x75, 0xc0, 0xf5, 0x64, 0xb7, 0x59, 0x47, 0xe6, 0xcc, 0xb7, 0xb1, 0xe6,
		0x9a, 0x77, 0x22, 0xf2, 0xe3, 0x9b, 0x9a, 0x3d, 0xea, 0xbb, 0x27, 0x15, 0xae, 0x55, 0x3f, 0xfd,
		0x8f, 0x35, 0x95, 0x24, 0x7f, 0x52, 0x77, 0x61, 0x3f, 0x78, 0xa4, 0xae, 0x3f, 0x08, 0xa4, 0x62,
		0xa2, 0xc3, 0x73, 0xfd, 0x86, 0x7d, 0xb7, 0xd7, 0x37, 0xfd, 0x76, 0xab, 0x2c, 0x87, 0x3f, 0x29,
		0xc9, 0x68, 0x24, 0x42, 0x95, 0x58, 0xdd, 0xda, 0xaf, 0xe8, 0x47, 0xe1, 0x7a, 0xdb, 0xdd, 0x2c,
		0xc0, 0x39, 0x6d, 0x28, 0x97, 0x2b, 0xe4, 0x35, 0x39, 0x19, 0x1a, 0xfc, 0xc9, 0x29, 0x61, 0xc2,
		0x21, 0xa1, 0x62, 0x52, 0x85, 0xf4, 0xd1, 0x55, 0xfd, 0x72, 0xa5, 0x72, 0x3e, 0xab, 0xae, 0x77,
		0x82, 0xf9, 0xfc, 0x8c, 0x9c, 0x84, 0x5f, 0x43, 0xc5, 0xfd, 0xea, 0xc9, 0xe9, 0x29, 0x09, 0x24,
		0x11, 0x81, 0x2a, 0x1b, 0x0d, 0xda, 0xf0, 0x69, 0x86, 0x6a, 0x22, 0x65, 0x20, 0x3f, 0xf2, 0x30,
		0x64, 0xbd, 0xcd, 0x16, 0xbc, 0x4e, 0xcb, 0x49, 0x2c, 0x33, 0xd2, 0xe6, 0x64, 0xe4, 0xd5, 0xce,
		0xf4, 0x66, 0xd2, 0xf4, 0x1d, 0xab, 0x54, 0x93, 0xc7, 0x8f, 0x4f, 0xfd, 0xd1, 0xf3, 0x9f, 0xe9,
		0xcf, 0x61, 0xaa, 0x96, 0x2b, 0x55, 0x74, 0x8d, 0x08, 0xb4, 0x26, 0x7c, 0x7e, 0x95, 0xee, 0x8a,
		0xd5, 0xbf, 0x6d, 0xad, 0xf1, 0x29, 0x92, 0x77, 0xb9, 0xe4, 0x22, 0x91, 0x7c, 0x66, 0x5a, 0xfe,
		0xc7, 0x2f, 0x3f, 0x91, 0xfa, 0xcd, 0xd5, 0xc5, 0x1d, 0xf9, 0xd4, 0xe7, 0xe4, 0xfd, 0x98, 0xb2,
		0x84, 0xe4, 0x6f, 0x32, 0x88, 0x06, 0xe4, 0xe3, 0xfb, 0xb7, 0x84, 0x12, 0xb7, 0xfb, 0x26, 0x96,
		0xd8, 0x9f, 0x8a, 0xa9, 0x28, 0xd4, 0xd1, 0x50, 0x43, 0x0d, 0x99, 0xd5, 0x8e, 0xe9, 0x5b, 0x6a,
		0x6a, 0xa3, 0xad, 0x56, 0xcc, 0x69, 0x84, 0x85, 0x18, 0xf2, 0xd3, 0x81, 0x57, 0x7a, 0xd7, 0x2f,
		0x41, 0x91, 0x52, 0x5b, 0x72, 0xf6, 0x25, 0x88, 0x14, 0xf5, 0x03, 0x47, 0x83, 0x15, 0xcd, 0x5f,
		0xbe, 0x9e, 0xbe, 0xd4, 0x40, 0x5f, 0x76, 0x41, 0x5f, 0x56, 0xd1, 0xdf, 0xc9, 0x05, 0x9d, 0x3e,
		0x13, 0x82, 0x7b, 0x34, 0x1c, 0x70, 0xee, 0x6c, 0x96, 0xc8, 0x58, 0xd2, 0xf3, 0xc3, 0x36, 0xbc,
		0xe4, 0x7a, 0x06, 0xbb, 0xa8, 0x0a, 0xf5, 0x0d, 0x17, 0x6a, 0xa8, 0x84, 0xad, 0x6a, 0x64, 0xe1,
		0x83, 0xb4, 0x54, 0x25, 0x5b, 0x07, 0xa4, 0xa7, 0x3a, 0x9a, 0xae, 0x65, 0x83, 0xf4, 0x37, 0x32,
		0xe2, 0x05, 0xd9, 0x73, 0x11, 0xf9, 0x5c, 0x32, 0xe5, 0x06, 0x42, 0x47, 0xf4, 0x1a, 0x0c, 0x59,
		0x93, 0x29, 0x6f, 0x7e, 0xe1, 0x35, 0x2f, 0x5b, 0x12, 0x91, 0x4f, 0x47, 0x7a, 0x1e, 0xea, 0x5b,
		0xc6, 0xdc, 0x28, 0x18, 0x06, 0x0c, 0x63, 0x8d, 0xec, 0x23, 0x57, 0xa8, 0x1b, 0x03, 0x93, 0xb8,
		0xd4, 0xb8, 0xf4, 0x0f, 0x26, 0x7a, 0x9b, 0x39, 0x9e, 0x3e, 0xd7, 0x9b, 0x4c, 0xfc, 0xd1, 0x15,
		0x46, 0xa4, 0x3d, 0x19, 0xf4, 0x9f, 0xcc, 0x8b, 0xf8, 0x6a, 0xf8, 0x5f, 0x39, 0xee, 0x17, 0xc9,
		0x3a, 0xb1, 0xbf, 0xf8, 0xd9, 0xed, 0xb9, 0x49, 0x54, 0x5b, 0x35, 0x9c, 0xe0, 0x57, 0xde, 0x63,
		0xca, 0x7d, 0x88, 0xef, 0xdd, 0x65, 0x5e, 0xc8, 0xb5, 0x47, 0x3f, 0x1b, 0x44, 0x05, 0x1f, 0xd9,
		0x53, 0x0a, 0x91, 0x54, 0x0f, 0x47, 0x26, 0x19, 0xc5, 0x35, 0x2d, 0x5b, 0x2f, 0x6d, 0xc4, 0x79,
		0x4c, 0xc2, 0x7e, 0xb7, 0x4b, 0xbb, 0x9c, 0xa9, 0x48, 0x66, 0x1a, 0x16, 0x4d, 0xbd, 0x4e, 0x3c,
		0xf9, 0xdd, 0x20, 0x90, 0x8a, 0x8e, 0xc9, 0x72, 0xce, 0x3e, 0x76, 0xe6, 0x85, 0x76, 0xe3, 0x67,
		0x97, 0xbc, 0xf1, 0x4e, 0xe2, 0xdd, 0xac, 0x13, 0x3a, 0x92, 0x53, 0x9f, 0xa9, 0xce, 0xca, 0x24,
		0x0c, 0x57, 0x7d, 0x2e, 0x05, 0x57, 0xb4, 0x76, 0x7e, 0x7f, 0x41, 0x6f, 0x5b, 0x27, 0x49, 0x06,
		0xc7, 0x60, 0x54, 0xed, 0xbe, 0x6a, 0x33, 0xac, 0x3e, 0x1a, 0x66, 0x36, 0xea, 0xe2, 0xbe, 0x4a,
		0x2f, 0x5a, 0x27, 0x5b, 0x48, 0x18, 0xbd, 0x1d, 0x69, 0x01, 0x11, 0x81, 0x22, 0x61, 0x34, 0x88,
		0x55, 0x83, 0x3b, 0xa4, 0x1b, 0x48, 0xa2, 0xfa, 0x6e, 0x48, 0xe2, 0xbf, 0xc7, 0xaf, 0xcc, 0xd4,
		0xf0, 0xef, 0x1e, 0x7f, 0xe0, 0xde, 0xd1, 0xe4, 0x92, 0xec, 0xa4, 0xb3, 0xc7, 0x69, 0xa6, 0x81,
		0xe4, 0x61, 0xd6, 0x59, 0xa6, 0x21, 0xff, 0x8d, 0x24, 0x0f, 0x89, 0xea, 0x73, 0xd2, 0x09, 0x84,
		0xe0, 0x1d, 0x15, 0xc8, 0x44, 0x4c, 0x63, 0x2f, 0x43, 0xd6, 0x24, 0x21, 0x32, 0x24, 0xb0, 0xe1,
		0xd6, 0x93, 0x4b, 0x06, 0x6f, 0xbf, 0xed, 0xa4, 0xd2, 0xaa, 0xb5, 0x3b, 0x21, 0x02, 0x35, 0x0c,
		0xf7, 0xd6, 0x82, 0x6f, 0xd8, 0xe9, 0x73, 0x9f, 0x0d, 0x98, 0xea, 0xc7, 0xef, 0x39, 0xeb, 0xb2,
		0x26, 0x19, 0xb4, 0xf3, 0xc9, 0x1f, 0xcf, 0x75, 0xb2, 0x4d, 0xc3, 0x69, 0x95, 0x8c, 0x3a, 0x4a,
		0x8c, 0x94, 0xe7, 0x4f, 0xe9, 0xfd, 0x1a, 0x4f, 0x3a, 0xcd, 0xca, 0x7d, 0x9e, 0xfc, 0xf1, 0xf3,
		0xd8, 0xfc, 0x3e, 0xae, 0x94, 0x9e, 0x5e, 0xe2, 0xcc, 0xe1, 0x61, 0x47, 0xba, 0x83, 0xb5, 0xaf,
		0x3c, 0x51, 0xe7, 0xd9, 0x8b, 0xb1, 0xe6, 0x77, 0xd0, 0x6b, 0x7e, 0x9b, 0x3f, 0xe5, 0x5c, 0x46,
		0xe3, 0x66, 0xcd, 0x35, 0x1f, 0xb8, 0xe8, 0x25, 0x86, 0x90, 0xda, 0x6d, 0x9a, 0x04, 0x6a, 0xa6,
		0x01, 0x9a, 0x75, 0x10, 0x62, 0x1e, 0x7c, 0x68, 0x04, 0x62, 0x46, 0x01, 0xd8, 0xe4, 0x55, 0xeb,
		0x97, 0x97, 0xfb, 0xf7, 0xb2, 0x39, 0x40, 0xf1, 0xef, 0x4c, 0x29, 0x2e, 0xc5, 0x46, 0x95, 0x2a,
		0xdd, 0xbf, 0xa1, 0x7f, 0x67, 0xf4, 0x1f, 0x55, 0x7a, 0x4b, 0xfe, 0xf2, 0x6f, 0xff, 0xf4, 0xcf,
		0x7f, 0xfd, 0xaf, 0x66, 0x54, 0xad, 0xd6, 0xaf, 0xca, 0xa7, 0xdf, 0x7f, 0x78, 0xfd, 0xdf, 0xff,
		0x57, 0x39, 0x3b, 0x39, 0xff, 0x7c, 0xf7, 0xaf, 0x3f, 0xd2, 0xd6, 0xbf, 0x94, 0x32, 0x02, 0x08,
		0x93, 0x08, 0x6d, 0xa7, 0xeb, 0x56, 0x9e, 0xcb, 0x8e, 0x7b, 0xc5, 0x2a, 0x11, 0xc0, 0x5e, 0xae,
		0x55, 0x8d, 0x83, 0x99, 0xcd, 0x78, 0x3b, 0xb9, 0x12, 0x2b, 0x54, 0x87, 0xb8, 0x42, 0xc5, 0x7a,
		0x3d, 0x19, 0xbb, 0x53, 0x4e, 0x5d, 0x83, 0x05, 0xaa, 0xb9, 0x51, 0x19, 0xa7, 0xe1, 0xab, 0x48,
		0xc3, 0x17, 0x2a, 0x0d, 0xef, 0x71, 0xd6, 0x95, 0xbc, 0x6b, 0xb2, 0x36, 0x75, 0xad, 0x71, 0xed,
		0xef, 0x4b, 0x02, 0x9b, 0xee, 0xdd, 0x34, 0xa0, 0x59, 0x48, 0xd1, 0x94, 0x52, 0xbd, 0xb7, 0x01,
		0xa8, 0xda, 0xa4, 0x3f, 0x2d, 0x56, 0x0c, 0x56, 0xa4, 0x43, 0x3d, 0xd6, 0x33, 0xc9, 0xb5, 0x58,
		0xe4, 0x78, 0x52, 0x27, 0x45, 0x33, 0x49, 0xf4, 0x6c, 0x4a, 0x92, 0xc6, 0x72, 0xd8, 0x7e, 0x0a,
		0x5e, 0x43, 0x71, 0xb5, 0x52, 0xa7, 0x29, 0xf4, 0x41, 0x04, 0xaa, 0x5c, 0xa9, 0x9c, 0x57, 0x2a,
		0xe7, 0xff, 0x1b, 0x84, 0xa7, 0x26, 0xba, 0x60, 0x95, 0x8a, 0x5c, 0xb8, 0xff, 0xff, 0x06, 0x21,
		0xe9, 0x8c, 0xb2, 0x2a, 0x49, 0x9a, 0x82, 0xb8, 0xe1, 0x8b, 0x04, 0x5c, 0x20, 0xc8, 0x87, 0x37,
		0x7f, 0x23, 0x3e, 0xf7, 0xdb, 0x5c, 0x26, 0x59, 0xb8, 0xd0, 0x54, 0x75, 0x2c, 0xf5, 0x36, 0xab,
		0x1c, 0x65, 0x66, 0x2a, 0xbc, 0xa0, 0xc6, 0x96, 0xe2, 0x33, 0xba, 0xe9, 0x73, 0xd6, 0x86, 0x71,
		0x96, 0xa7, 0x32, 0xc7, 0x42, 0x2d, 0x9f, 0x92, 0xd7, 0x64, 0xa8, 0xd5, 0x5e, 0x10, 0x0c, 0xda,
		0xac, 0xf3, 0x25, 0xc9, 0x54, 0x91, 0x40, 0x0e, 0x63, 0xc0, 0x55, 0x17, 0xec, 0xc0, 0x00, 0xe6,
		0x1f, 0x90, 0x09, 0x87, 0xcc, 0xd2, 0x25, 0xd2, 0x61, 0x22, 0xf9, 0x9e, 0x6d, 0x3e, 0xf9, 0xce,
		0xdc, 0x21, 0x2a, 0xe8, 0x25, 0x4c, 0x1a, 0x76, 0x30, 0xb2, 0x83, 0x74, 0x52, 0x2c, 0xb0, 0x39,
		0x0c, 0x95, 0xdc, 0x57, 0x11, 0x69, 0x46, 0xd5, 0xea, 0x05, 0x7f, 0x4d, 0xaa, 0x3b, 0x50, 0xf2,
		0xf8, 0xfe, 0x50, 0x6d, 0x3b, 0xd5, 0xb6, 0x91, 0xdd, 0xf1, 0xf8, 0xf7, 0x07, 0x8f, 0x09, 0xaa,
		0x58, 0xaf, 0xe7, 0x8a, 0xde, 0x32, 0xf7, 0x3e, 0xfb, 0xfb, 0x1d, 0x28, 0xfe, 0xdc, 0xe3, 0xc1,
		0x02, 0xec, 0x2c, 0x20, 0x95, 0x10, 0x0b, 0xef, 0xdb, 0xc7, 0x29, 0xb5, 0x73, 0x27, 0x1a, 0x78,
		0xfc, 0x69, 0x57, 0x3c, 0x66, 0xe6, 0xee, 0x50, 0x74, 0x4b, 0x45, 0x4f, 0x23, 0xc3, 0xe3, 0x71,
		0xf9, 0x13, 0x85, 0xef, 0x7a, 0xc1, 0x23, 0xed, 0x04, 0x42, 0xc9, 0xc0, 0x3b, 0x97, 0xbc, 0xc3,
		0xdd, 0x87, 0xa5, 0x14, 0x7f, 0xed, 0x80, 0x1d, 0x98, 0xca, 0xec, 0x63, 0x90, 0xf1, 0x73, 0xc3,
		0x66, 0xec, 0x6c, 0x26, 0x13, 0x61, 0x1e, 0xbb, 0xf1, 0x28, 0xc9, 0x44, 0xe8, 0xbb, 0x4a, 0xdf,
		0x7a, 0xc6, 0x23, 0x76, 0x6d, 0x3e, 0x93, 0x27, 0x87, 0xfd, 0x64, 0x60, 0x3f, 0xd6, 0xd2, 0x2c,
		0xa8, 0x01, 0xad, 0x58, 0x2e, 0xb8, 0x5f, 0x58, 0x2e, 0x78, 0x5d, 0x69, 0x9d, 0x7b, 0xac, 0x77,
		0x3e, 0xcc, 0xb2, 0x69, 0x95, 0x62, 0xe5, 0x11, 0x66, 0xcf, 0xdc, 0x7d, 0x52, 0x0e, 0x3b, 0xf3,
		0xb9, 0x02, 0x41, 0x58, 0x18, 0x06, 0x1d, 0x97, 0x29, 0xfe, 0xe2, 0xfb, 0xae, 0x6a, 0x71, 0x71,
		0xc4, 0x71, 0x77, 0x16, 0xc2, 0x2c, 0x7c, 0xf4, 0x31, 0xb7, 0x13, 0x70, 0x07, 0x60, 0x30, 0x27,
		0xf7, 0xd8, 0x41, 0x4d, 0xb2, 0xe1, 0x6d, 0x8f, 0x93, 0xc7, 0x3e, 0x17, 0x64, 0xee, 0x11, 0x89,
		0x1b, 0x8e, 0x0a, 0xc4, 0x1d, 0x68, 0xfa, 0xb8, 0x88, 0x3e, 0x85, 0x0c, 0x8f, 0x27, 0xbc, 0x0e,
		0x15, 0x13, 0x4e, 0xfb, 0x2b, 0x0d, 0xdd, 0x9e, 0x60, 0xde, 0x6e, 0xd2, 0x49, 0x0b, 0xcf, 0xb0,
		0x14, 0xa8, 0xc1, 0x7a, 0x36, 0xaa, 0x7c, 0x6a, 0x41, 0xee, 0x56, 0xef, 0xf3, 0xab, 0xee, 0x5a,
		0xb3, 0x0f, 0x8a, 0x45, 0x2a, 0xa0, 0x82, 0xf7, 0x02, 0xe5, 0xae, 0x6b, 0xd4, 0xb4, 0xe8, 0xa2,
		0xe7, 0xc7, 0x61, 0x03, 0x10, 0x36, 0x00, 0xad, 0x91, 0x7d, 0x3b, 0x08, 0x3c, 0xce, 0x8c, 0x8a,
		0xd3, 0x6b, 0xc7, 0xb1, 0x57, 0x67, 0xe0, 0x31, 0xd5, 0x0d, 0xa4, 0x4f, 0xaf, 0xeb, 0xf5, 0x2a,
		0x75, 0x6a, 0xd8, 0xb8, 0xb3, 0x4c, 0x28, 0x47, 0xb9, 0x8b, 0x67, 0xb6, 0xda, 0x50, 0xa3, 0x26,
		0xb2, 0xb6, 0xb4, 0xb8, 0x51, 0x6b, 0xe0, 0x45, 0x6b, 0x45, 0x69, 0xe4, 0xe6, 0xd1, 0x8d, 0xfb,
		0x2a, 0xbd, 0xd1, 0xab, 0x73, 0xcc, 0x3a, 0x48, 0x98, 0x45, 0x20, 0x37, 0x10, 0x8b, 0x3b, 0x64,
		0x92, 0x82, 0x3e, 0xc4, 0xc0, 0x0b, 0x91, 0x81, 0xa9, 0xe0, 0x10, 0xef, 0x6e, 0x53, 0x95, 0x39,
		0x22, 0xde, 0x0c, 0xf4, 0x9a, 0x1f, 0x56, 0xcc, 0xbb, 0x13, 0xee, 0x3f, 0xb3, 0x32, 0xa9, 0x4f,
		0xfc, 0x67, 0x07, 0x81, 0xf5, 0x83, 0xf5, 0xaf, 0x91, 0xfd, 0xee, 0xdb, 0x52, 0x21, 0x4a, 0x40,
		0x94, 0x80, 0x28, 0xe1, 0x98, 0xa3, 0x84, 0xd9, 0xdd, 0x37, 0x08, 0x10, 0xf4, 0xec, 0xcc, 0x44,
		0x66, 0x88, 0x0d, 0xb6, 0xac, 0xc0, 0x08, 0x0c, 0x52, 0xeb, 0x33, 0xa2, 0x82, 0x75, 0x51, 0xc1,
		0xec, 0xde, 0x11, 0xfd, 0xb0, 0x60, 0x6e, 0x94, 0x5e, 0x5c, 0x50, 0x43, 0x5c, 0x50, 0x84, 0xb8,
		0x60, 0x53, 0x7d, 0xf9, 0xe4, 0xc2, 0xd1, 0x3e, 0x3e, 0xf3, 0x0e, 0x67, 0xe3, 0x81, 0x9a, 0x82,
		0xd0, 0x0b, 0x3b, 0x8d, 0xd5, 0xcc, 0x46, 0xdd, 0xd2, 0xaa, 0x5d, 0x96, 0x24, 0xde, 0x48, 0x0d,
		0xf3, 0x26, 0xf0, 0x3a, 0x6a, 0x99, 0x0b, 0x17, 0xd0, 0x0f, 0x63, 0x53, 0x2c, 0x62, 0x2d, 0x78,
		0xba, 0x5a, 0xa6, 0xaf, 0x60, 0x11, 0xb6, 0xda, 0x85, 0x23, 0xe6, 0x04, 0x6a, 0x51, 0xe1, 0xe7,
		0x4f, 0xd7, 0x58, 0x1d, 0x2d, 0xf8, 0x3d, 0x5f, 0x0d, 0x43, 0x0b, 0xed, 0x21, 0xe3, 0x00, 0xc3,
		0x70, 0x98, 0xc7, 0x7a, 0x46, 0x91, 0x48, 0x36, 0x84, 0x6e, 0x2d, 0x62, 0x4e, 0xf6, 0x38, 0x67,
		0x1b, 0xa2, 0x64, 0x41, 0xed, 0xf2, 0xa0, 0x78, 0x99, 0x52, 0xbd, 0xa5, 0x9e, 0xc6, 0x4a, 0xb8,
		0x56, 0xb7, 0x7e, 0x7e, 0x95, 0xef, 0x88, 0xe7, 0xb3, 0x6d, 0x99, 0xea, 0x34, 0xe6, 0x49, 0x13,
		0xf6, 0x6c, 0xdb, 0x5a, 0x72, 0x8b, 0x87, 0x60, 0x3c, 0x69, 0x64, 0xbd, 0x9f, 0xb6, 0xa4, 0x7d,
		0x75, 0x2b, 0xab, 0x0e, 0xb0, 0x1a, 0xa1, 0xc5, 0x78, 0x7f, 0xbe, 0x39, 0x31, 0x9e, 0x8c, 0x04,
		0x33, 0x06, 0x33, 0x06, 0x33, 0x4e, 0xc7, 0x8c, 0x2d, 0x16, 0x76, 0xb2, 0xe0, 0xc7, 0xf3, 0x6b,
		0x1a, 0xea, 0x89, 0x1a, 0x64, 0x52, 0xf2, 0x80, 0xab, 0x4c, 0xd6, 0x7d, 0x32, 0xc7, 0xa8, 0x75,
		0xeb, 0x40, 0x2f, 0x65, 0xb6, 0x3f, 0x20, 0x72, 0x56, 0x80, 0xb8, 0xac, 0x40, 0x41, 0xd6, 0xa4,
		0x10, 0x0e, 0x51, 0x56, 0x0e, 0x44, 0x51, 0x5b, 0xba, 0x08, 0xb3, 0x0e, 0x24, 0xcc, 0x9a, 0xfb,
		0xa2, 0x88, 0xb3, 0xb6, 0x68, 0x3e, 0x08, 0xb4, 0x8c, 0x03, 0xad, 0x54, 0x6b, 0x18, 0x9a, 0x07,
		0x2a, 0x4c, 0xae, 0x37, 0x3b, 0x58, 0x61, 0x69, 0xb1, 0xbd, 0xce, 0xa2, 0x93, 0xc1, 0x41, 0x0b,
		0xef, 0x46, 0xf7, 0xf8, 0xfc, 0x8b, 0x17, 0x3c, 0xfe, 0xa4, 0xc3, 0x84, 0xec, 0x56, 0x07, 0xfb,
		0x81, 0xe7, 0x50, 0xe5, 0xfa, 0x06, 0x3b, 0x06, 0xa7, 0x43, 0xb0, 0x2e, 0x88, 0x75, 0xc1, 0xc5,
		0x0b, 0x9d, 0xe0, 0x51, 0x98, 0xe7, 0x3e, 0x92, 0x51, 0xc8, 0x7b, 0x20, 0xef, 0xb1, 0xc3, 0xbc,
		0x47, 0xe4, 0x0a, 0x75, 0x51, 0xb7, 0x48, 0x7b, 0x5c, 0x1b, 0x0c, 0x31, 0x3b, 0x6f, 0x32, 0x05,
		0x41, 0xb5, 0x39, 0x7f, 0x72, 0x32, 0xd8, 0xf2, 0x1c, 0xca, 0xc9, 0xf8, 0xb4, 0x67, 0x2f, 0x4e,
		0xbf, 0x8d, 0xed, 0x19, 0x8c, 0x96, 0x91, 0x00, 0xb1, 0x3d, 0xa7, 0x72, 0x41, 0x74, 0x37, 0x57,
		0x8d, 0x6a, 0xf5, 0xf0, 0xc5, 0x57, 0x80, 0x8c, 0x7c, 0x8c, 0x2d, 0x94, 0x3f, 0x0d, 0x5c, 0xc9,
		0x43, 0x3b, 0x64, 0x9a, 0x8c, 0xce, 0x19, 0xa1, 0xea, 0x40, 0x28, 0x20, 0xd4, 0x3a, 0x5d, 0x64,
		0x8a, 0x53, 0x26, 0x86, 0xfc, 0x9b, 0x3a, 0xdc, 0x53, 0xcc, 0x26, 0x4b, 0x7f, 0x63, 0x30, 0x46,
		0xf3, 0x9c, 0xad, 0x7d, 0x01, 0xac, 0x7a, 0x15, 0x88, 0x65, 0x2b, 0xbb, 0x8b, 0x3a, 0xe0, 0x2a,
		0x83, 0xdc, 0xbf, 0xee, 0x39, 0x62, 0x0b, 0x03, 0x9b, 0x4d, 0xe7, 0x5b, 0xe3, 0x99, 0xc6, 0x3f,
		0xea, 0xe3, 0x1f, 0x9f, 0x86, 0x3f, 0xee, 0xe6, 0x7e, 0x94, 0x9b, 0xcd, 0x4a, 0xb3, 0xe9, 0xfc,
		0x70, 0xfa, 0x63, 0xf9, 0xef, 0xdf, 0xef, 0x9b, 0xcd, 0x1f, 0x9a, 0x4d, 0xda, 0x9a, 0xbb, 0xe2,
		0xb4, 0xb4, 0x97, 0x48, 0x1c, 0x0d, 0xcc, 0xf1, 0x37, 0x1a, 0x20, 0x2e, 0x04, 0xea, 0x22, 0x2e,
		0x44, 0x5c, 0x88, 0xb8, 0x10, 0x71, 0x61, 0xb6, 0x68, 0x64, 0x1f, 0x15, 0xce, 0x8c, 0x45, 0x4c,
		0x08, 0x74, 0x42, 0x4c, 0x88, 0x98, 0x10, 0x31, 0x21, 0x62, 0x42, 0xc4, 0x84, 0x06, 0x57, 0x14,
		0xa6, 0x9f, 0x47, 0x37, 0x8a, 0x6f, 0x48, 0xeb, 0x35, 0x5a, 0x43, 0x2f, 0x8f, 0x05, 0x81, 0x1c,
		0x65, 0x1f, 0x8f, 0xc5, 0x9d, 0x95, 0xeb, 0x77, 0x63, 0x6e, 0xbf, 0x13, 0xc1, 0x64, 0x1f, 0x07,
		0x1a, 0x69, 0x68, 0x2a, 0xb9, 0xbe, 0xc4, 0xd0, 0x46, 0x63, 0xab, 0xca, 0x8b, 0x26, 0x1a, 0x29,
		0x75, 0xb9, 0x40, 0x2d, 0x34, 0x34, 0x7c, 0xff, 0x40, 0xf2, 0x90, 0x8b, 0x4e, 0xae, 0x0c, 0xe1,
		0xa7, 0x71, 0x3f, 0xf2, 0x90, 0xa8, 0x3e, 0x27, 0x53, 0x71, 0x3f, 0xc4, 0xc4, 0x3a, 0xdc, 0x7e,
		0x90, 0x3d, 0x7c, 0xe3, 0x5d, 0x72, 0x84, 0x4d, 0x22, 0xd9, 0xb7, 0x76, 0x2b, 0xfb, 0xb1, 0xc9,
		0x54, 0x77, 0xbb, 0x25, 0xb1, 0xdd, 0x61, 0xfa, 0xef, 0x81, 0xe7, 0x7c, 0x72, 0x37, 0x9e, 0xa6,
		0x6f, 0xb7, 0xbd, 0xf4, 0x91, 0xfa, 0xac, 0x43, 0x99, 0xe3, 0x48, 0x1e, 0x86, 0x06, 0x7b, 0x4c,
		0xe7, 0xc7, 0x65, 0xdc, 0x98, 0xb2, 0x8e, 0x8d, 0xa6, 0xb9, 0x66, 0xc8, 0xb6, 0xdd, 0x98, 0x52,
		0x5f, 0x55, 0x4c, 0x33, 0x5e, 0xc6, 0x71, 0x7b, 0xe9, 0xbe, 0x4a, 0x6f, 0x19, 0xed, 0xbe, 0xa1,
		0xbf, 0xb4, 0xe2, 0xa0, 0xfc, 0x6e, 0xfe, 0xef, 0xa7, 0xdf, 0x2e, 0x9f, 0x4b, 0x3b, 0x69, 0x03,
		0xe5, 0xb1, 0xce, 0x80, 0xc6, 0x7c, 0x95, 0x0e, 0xa4, 0x1b, 0x48, 0x57, 0x7d, 0xd5, 0xb7, 0xc6,
		0x25, 0x63, 0xd1, 0x2a, 0x16, 0x16, 0xb9, 0x6e, 0x75, 0xc4, 0x15, 0xaa, 0x76, 0x65, 0x60, 0x8c,
		0x57, 0x1a, 0x97, 0x9a, 0xad, 0x90, 0x1a, 0x70, 0x36, 0x9b, 0x24, 0xf3, 0x24, 0x41, 0x6a, 0x98,
		0xd6, 0x4c, 0x9d, 0x17, 0xb5, 0xcf, 0x87, 0x1a, 0xe4, 0x90, 0xad, 0x72, 0xc7, 0x13, 0x91, 0x5c,
		0x5d, 0x5e, 0x5e, 0x5c, 0x1e, 0x8e, 0x58, 0xf6, 0x82, 0x4d, 0x1e, 0x4c, 0xae, 0x33, 0x01, 0x83,
		0x2e, 0xf3, 0xbc, 0x36, 0xeb, 0x7c, 0x41, 0xb2, 0x73, 0x41, 0x22, 0xc8, 0x76, 0xee, 0x65, 0xb6,
		0x73, 0x91, 0xc3, 0x20, 0xed, 0xa9, 0xa9, 0xee, 0x16, 0xa2, 0x43, 0xfe, 0x73, 0x37, 0xea, 0x8c,
		0x44, 0x68, 0x56, 0xda, 0x8d, 0xa6, 0xc2, 0xeb, 0xa2, 0xc9, 0x41, 0xff, 0x6b, 0xe8, 0x76, 0x98,
		0x47, 0x7d, 0xee, 0xb8, 0xc3, 0xa3, 0x1b, 0xf4, 0x42, 0xc9, 0x97, 0x03, 0x91, 0xd9, 0x41, 0x1c,
		0xb9, 0x46, 0xf6, 0xbb, 0x3f, 0x72, 0xc4, 0xce, 0x3c, 0x62, 0x77, 0x32, 0x3c, 0x5f, 0x5c, 0xdf,
		0x32, 0xa6, 0x63, 0x90, 0x5c, 0x81, 0x51, 0xec, 0xb5, 0x51, 0x6c, 0x78, 0xa5, 0x77, 0x4f, 0x49,
		0x04, 0xbf, 0x39, 0xda, 0x30, 0x57, 0x86, 0xe9, 0x97, 0xe1, 0x4f, 0xea, 0x2e, 0xec, 0x07, 0x8f,
		0xd4, 0xf5, 0x63, 0xd3, 0x61, 0xfa, 0xab, 0x5b, 0xd9, 0xe8, 0x48, 0xdf, 0xed, 0xf5, 0xd3, 0xea,
		0x46, 0x2b, 0x87, 0xa4, 0x40, 0xde, 0xa1, 0x5e, 0xd9, 0x34, 0xd6, 0xdb, 0x01, 0x3b, 0x8e, 0x15,
		0x82, 0x24, 0xbe, 0x74, 0x91, 0xcb, 0x21, 0xce, 0x5b, 0xa5, 0xd1, 0x66, 0x52, 0x43, 0x88, 0xb7,
		0x05, 0x25, 0xa6, 0x2b, 0x3e, 0x07, 0x42, 0x3b, 0x5d, 0x85, 0xb6, 0x93, 0xe0, 0x11, 0x86, 0x74,
		0x92, 0x7b, 0x01, 0x73, 0xa8, 0xc3, 0x3d, 0x66, 0xb0, 0x34, 0x38, 0x37, 0x0a, 0xbc, 0x15, 0xbc,
		0x75, 0x8d, 0xec, 0xb5, 0xcb, 0x28, 0x0d, 0xca, 0x27, 0xf7, 0x74, 0x51, 0xb0, 0x86, 0x45, 0xc1,
		0x97, 0x22, 0xb1, 0x28, 0x7b, 0xc4, 0xa2, 0xe0, 0xa1, 0x2c, 0x0a, 0x1a, 0xc0, 0x40, 0x16, 0xd4,
		0x63, 0xff, 0xd7, 0x04, 0xe7, 0x04, 0x82, 0x25, 0xc1, 0xbd, 0x5c, 0x12, 0x9c, 0xfd, 0x46, 0x58,
		0x0c, 0xd4, 0xd4, 0x73, 0x23, 0xa1, 0x21, 0x46, 0xdc, 0xb6, 0x0a, 0x23, 0x4a, 0x4c, 0xaf, 0xd1,
		0x88, 0x13, 0x75, 0xe3, 0x44, 0xed, 0xf6, 0x09, 0x4b, 0x15, 0x56, 0xb3, 0x81, 0x02, 0x16, 0x01,
		0x8f, 0x3c, 0x6e, 0xb4, 0x6b, 0x70, 0x60, 0xb4, 0xcd, 0xdb, 0xb0, 0xa1, 0xc1, 0xb6, 0xc2, 0xc8,
		0x3a, 0x36, 0x97, 0x2e, 0xc8, 0xc4, 0xb4, 0x21, 0x41, 0x11, 0x82, 0xc8, 0x3c, 0x0a, 0x15, 0xb6,
		0xdb, 0x58, 0x00, 0x71, 0x30, 0xe2, 0xe0, 0x52, 0x21, 0xf8, 0x4f, 0xa8, 0x98, 0x70, 0xda, 0x5f,
		0x69, 0xe8, 0xf6, 0x04, 0xf3, 0x5c, 0xd1, 0xd3, 0x27, 0x3f, 0x8b, 0x43, 0x91, 0x31, 0x07, 0xf3,
		0x59, 0x23, 0xfb, 0xbd, 0xdf, 0xe9, 0x71, 0x30, 0x8e, 0x99, 0x3f, 0x0c, 0x04, 0xf5, 0xfb, 0x34,
		0x74, 0x45, 0xcf, 0xe3, 0x34, 0x66, 0x04, 0x0f, 0x1c, 0x1e, 0x7a, 0xa5, 0x64, 0x90, 0xb2, 0xb4,
		0x3e, 0x41, 0x2f, 0x8b, 0xe3, 0xf3, 0x32, 0x4a, 0x0f, 0x2d, 0x00, 0x0e, 0xd2, 0x9c, 0xba, 0x46,
		0x62, 0x2c, 0xb9, 0x82, 0xe6, 0x3a, 0xcb, 0xe5, 0x0a, 0x79, 0x1d, 0x2b, 0x70, 0x67, 0x70, 0x72,
		0x4a, 0x98, 0x70, 0xc8, 0x48, 0xcd, 0x3d, 0xd6, 0x8b, 0xff, 0x4f, 0xd5, 0xd7, 0x01, 0x9f, 0x5e,
		0x91, 0xd8, 0x44, 0xb9, 0x42, 0xfe, 0x32, 0xf9, 0x97, 0x1d, 0xd5, 0x46, 0xb4, 0x59, 0xc8, 0x1d,
		0xb2, 0xf8, 0x19, 0x67, 0x3f, 0xa1, 0xf7, 0x35, 0xfe, 0x8e, 0xf1, 0xe5, 0xe3, 0x84, 0x1e, 0xf1,
		0x58, 0x6f, 0xfa, 0x4d, 0x43, 0x98, 0xc3, 0x6c, 0x91, 0x44, 0x36, 0x22, 0xc5, 0x9a, 0xc0, 0x4e,
		0x9c, 0x3e, 0x16, 0x06, 0x32, 0xc2, 0x00, 0xac, 0x0e, 0x6c, 0x88, 0x8e, 0x95, 0x1b, 0x2a, 0xb7,
		0x13, 0x1a, 0x85, 0xc5, 0xe3, 0x31, 0x19, 0x9f, 0x28, 0x88, 0x95, 0x80, 0x7d, 0x8e, 0x87, 0xb5,
		0x4f, 0x14, 0x74, 0x05, 0xad, 0x55, 0xeb, 0x8d, 0x36, 0x55, 0x01, 0xad, 0x5d, 0xd6, 0x6e, 0xda,
		0xb4, 0x2b, 0x99, 0x6f, 0xd3, 0xb5, 0x7b, 0xe5, 0x4c, 0x38, 0x61, 0x02, 0x3d, 0xbc, 0xd3, 0xb2,
		0x86, 0x14, 0x3d, 0xbc, 0xff, 0xc1, 0x65, 0x30, 0xe4, 0x57, 0xb4, 0x13, 0x44, 0x31, 0x59, 0xba,
		0x6a, 0x58, 0x34, 0xf1, 0x36, 0xe9, 0xe1, 0xfd, 0x33, 0xef, 0xb2, 0xc8, 0x4b, 0x64, 0x57, 0x35,
		0xb9, 0xd5, 0xbf, 0xb3, 0x70, 0x3a, 0xd4, 0xec, 0xa3, 0x1d, 0xd8, 0x19, 0x17, 0xe8, 0x1a, 0x6e,
		0x2d, 0xba, 0xda, 0x4d, 0xa3, 0x71, 0x75, 0xdd, 0x68, 0x54, 0xaf, 0x2f, 0xae, 0xab, 0xb7, 0x97,
		0x97, 0xb5, 0xab, 0xda, 0x25, 0xfa, 0x88, 0x5b, 0xf1, 0x30, 0xfd, 0xf9, 0x74, 0x8e, 0xbc, 0x88,
		0x01, 0xb0, 0x7e, 0x93, 0xe0, 0x5f, 0xfd, 0xf2, 0x32, 0x1d, 0x90, 0x2e, 0x99, 0x07, 0x30, 0x0a,
		0x18, 0x05, 0x8c, 0x02, 0x46, 0x01, 0xa3, 0x80, 0xd1, 0xa2, 0xc3, 0xe8, 0x65, 0xed, 0xb6, 0x4d,
		0x03, 0x49, 0xbd, 0x40, 0xf4, 0xb8, 0x4c, 0x85, 0xa4, 0xcb, 0xa7, 0x02, 0x98, 0x02, 0x4c, 0x01,
		0xa6, 0x00, 0x53, 0x80, 0x29, 0xc0, 0xb4, 0xe0, 0x60, 0x5a, 0xbf, 0xbc, 0x4a, 0x62, 0xc9, 0xcb,
		0x5a, 0x2d, 0x55, 0x4c, 0xba, 0x6c, 0x1e, 0xc0, 0x28, 0x60, 0x14, 0x30, 0x0a, 0x18, 0x05, 0x8c,
		0x02, 0x46, 0x0b, 0x0e, 0xa3, 0x97, 0xb5, 0xfa, 0x70, 0x69, 0xb3, 0x5a, 0xbf, 0x48, 0x85, 0xa3,
		0x4b, 0x27, 0x02, 0x90, 0x02, 0x48, 0x01, 0xa4, 0x00, 0x52, 0x00, 0x29, 0x80, 0xb4, 0xe0, 0x40,
		0x7a, 0xd5, 0x48, 0x05, 0x9f, 0x33, 0xc3, 0x01, 0x9a, 0x00, 0x4d, 0x80, 0x26, 0x40, 0x13, 0xa0,
		0x09, 0xd0, 0x2c, 0x3a, 0x68, 0x5e, 0x0e, 0x63, 0xc6, 0xfa, 0x75, 0x3a, 0xf0, 0x5c, 0x9c, 0x06,
		0x20, 0x0a, 0x10, 0x05, 0x88, 0x02, 0x44, 0x01, 0xa2, 0x00, 0xd1, 0x82, 0x83, 0x68, 0x47, 0x76,
		0xe8, 0xb0, 0x14, 0x2e, 0x05, 0x84, 0x2e, 0x4c, 0x02, 0x00, 0x05, 0x80, 0x02, 0x40, 0x01, 0xa0,
		0x00, 0x50, 0x00, 0x68, 0xc1, 0x01, 0xb4, 0x2b, 0x59, 0x2f, 0xf6, 0x9a, 0x69, 0xf0, 0xf3, 0xe5,
		0x1c, 0x80, 0x4f, 0xc0, 0x27, 0xe0, 0x13, 0xf0, 0x09, 0xf8, 0x04, 0x7c, 0x16, 0x1c, 0x3e, 0xff,
		0x87, 0xb5, 0xdb, 0xe9, 0xaa, 0x59, 0xe6, 0x67, 0x00, 0x74, 0x02, 0x3a, 0x01, 0x9d, 0x80, 0x4e,
		0x40, 0x27, 0xa0, 0xb3, 0xe0, 0xd0, 0xe9, 0xb3, 0x0e, 0x1d, 0xb0, 0x28, 0xe4, 0x69, 0xd0, 0x73,
		0x61, 0x12, 0x00, 0x28, 0x00, 0x14, 0x00, 0x0a, 0x00, 0x05, 0x80, 0x02, 0x40, 0x0b, 0x0e, 0xa0,
		0xc1, 0x03, 0x97, 0xa1, 0xfb, 0x8f, 0x54, 0xf8, 0xf9, 0x72, 0x0e, 0xc0, 0x27, 0xe0, 0x13, 0xf0,
		0x09, 0xf8, 0x04, 0x7c, 0x02, 0x3e, 0x8b, 0x0c, 0x9f, 0x1e, 0x0b, 0x15, 0xed, 0x78, 0x9c, 0x49,
		0x73, 0xd8, 0x9c, 0x19, 0x0b, 0xb8, 0x04, 0x5c, 0xee, 0x10, 0x2e, 0xed, 0x8e, 0x7a, 0x7c, 0xa9,
		0x96, 0x35, 0x13, 0xb8, 0x34, 0x3c, 0xfa, 0x71, 0xd7, 0xd8, 0x55, 0x07, 0x78, 0x59, 0xcb, 0xce,
		0xf4, 0xe8, 0xc8, 0x63, 0x82, 0x2a, 0x03, 0x8b, 0x31, 0x3d, 0x6a, 0x72, 0x32, 0x70, 0xbb, 0x47,
		0x4e, 0xee, 0x02, 0x85, 0x83, 0x48, 0x65, 0xd5, 0xaa, 0x7e, 0xf5, 0x54, 0xc0, 0x68, 0x60, 0x34,
		0x42, 0x5a, 0x84, 0xb4, 0x08, 0x69, 0x11, 0xd2, 0x16, 0x39, 0xa4, 0x4d, 0x10, 0x30, 0x8b, 0x66,
		0xf5, 0xab, 0x26, 0x02, 0x90, 0x02, 0x48, 0x01, 0xa4, 0x00, 0x52, 0x00, 0x29, 0x80, 0xb4, 0xf0,
		0x40, 0x9a, 0x51, 0xbb, 0xfa, 0x35, 0x73, 0x01, 0x4e, 0x01, 0xa7, 0x80, 0x53, 0xc0, 0x29, 0xe0,
		0x14, 0x70, 0x5a, 0x74, 0x38, 0xcd, 0xa4, 0x61, 0xfd, 0xaa, 0x89, 0x00, 0xa4, 0x00, 0x52, 0x00,
		0x29, 0x80, 0x14, 0x40, 0x0a, 0x20, 0x2d, 0x3a, 0x90, 0x66, 0xd3, 0xb2, 0x7e, 0xe5, 0x4c, 0x80,
		0x52, 0x40, 0x29, 0xa0, 0x14, 0x50, 0x0a, 0x28, 0x05, 0x94, 0x16, 0x1d, 0x4a, 0xd3, 0x34, 0xad,
		0x7f, 0x31, 0x1e, 0xb0, 0x09, 0xd8, 0x04, 0x6c, 0x02, 0x36, 0x01, 0x9b, 0x80, 0xcd, 0xc2, 0xc3,
		0x66, 0x06, 0x6d, 0xeb, 0x57, 0xcc, 0x03, 0x18, 0x05, 0x8c, 0x02, 0x46, 0x01, 0xa3, 0x80, 0x51,
		0xc0, 0x68, 0xd1, 0x61, 0x34, 0x7d, 0xf7, 0xa3, 0xa5, 0xb3, 0x00, 0x42, 0x01, 0xa1, 0x80, 0x50,
		0x40, 0x28, 0x20, 0x14, 0x10, 0x7a, 0xb0, 0x10, 0xfa, 0x2a, 0x85, 0x2e, 0x94, 0xde, 0x08, 0x11,
		0x28, 0x16, 0x4b, 0x5a, 0xeb, 0xf3, 0x97, 0xc2, 0x4e, 0x9f, 0xfb, 0x6c, 0xc0, 0x92, 0xa2, 0xf6,
		0xd2, 0xf9, 0x8c, 0xff, 0x8d, 0xdd, 0x57, 0x97, 0x75, 0x78, 0x78, 0x3e, 0xf9, 0xe3, 0x39, 0x57,
		0x7d, 0x2e, 0x05, 0x57, 0xe7, 0x61, 0x7c, 0x8f, 0x50, 0xb9, 0x1d, 0x1d, 0xcc, 0x2d, 0x85, 0x4a,
		0x46, 0x1d, 0x25, 0x46, 0x5e, 0xf2, 0x4f, 0xe9, 0xfd, 0x1a, 0xdf, 0xe2, 0xfd, 0xe4, 0x0e, 0x9f,
		0x27, 0x7f, 0xfc, 0xfc, 0x6e, 0x74, 0x87, 0xcf, 0x7f, 0x4e, 0xef, 0xf0, 0xca, 0x4e, 0x5c, 0x6b,
		0x44, 0x55, 0x0a, 0x55, 0x20, 0x7d, 0xda, 0x09, 0x84, 0x92, 0x81, 0xb7, 0x51, 0x52, 0x53, 0x70,
		0x9e, 0x1b, 0xb6, 0xe1, 0x53, 0x8c, 0xfb, 0x0b, 0x6c, 0xb8, 0x4c, 0x97, 0x5d, 0x98, 0xb0, 0x0a,
		0x5b, 0x36, 0x61, 0xca, 0x22, 0xac, 0xd9, 0x83, 0x35, 0x6b, 0x48, 0xc1, 0x16, 0xd2, 0x19, 0xd6,
		0xcf, 0xae, 0x5e, 0xaf, 0x94, 0x52, 0x5b, 0x06, 0xcc, 0xe9, 0xb0, 0x50, 0x51, 0xc9, 0x14, 0x37,
		0x27, 0xb6, 0x2f, 0xc6, 0x83, 0xd2, 0x82, 0xd2, 0xee, 0x90, 0xd2, 0x46, 0xae, 0x50, 0x17, 0x75,
		0x0b, 0x12, 0x7b, 0x0d, 0x42, 0x09, 0x42, 0xb9, 0x40, 0x28, 0xab, 0xe3, 0xff, 0x81, 0x46, 0xa6,
		0xa3, 0x91, 0x9a, 0x86, 0xcf, 0x9f, 0x94, 0x64, 0x34, 0x12, 0xa1, 0x62, 0x6d, 0xcf, 0xd0, 0x05,
		0xf8, 0x51, 0xa8, 0xb6, 0x61, 0x94, 0x63, 0x57, 0x23, 0x02, 0x55, 0xae, 0x54, 0xce, 0x23, 0xe1,
		0xaa, 0x90, 0xbc, 0x26, 0x27, 0x03, 0x2e, 0x3b, 0x5c, 0x28, 0xd6, 0xe3, 0x27, 0x84, 0x09, 0x87,
		0x94, 0x2b, 0xa4, 0x19, 0x55, 0xab, 0x17, 0xbc, 0x56, 0xad, 0x9e, 0x9e, 0x96, 0x2c, 0x74, 0xf8,
		0x9d, 0x94, 0x81, 0xfc, 0xc8, 0xc3, 0x90, 0xf5, 0xb8, 0xbd, 0x32, 0x8f, 0x9f, 0xf7, 0x53, 0x9f,
		0x93, 0x07, 0xe6, 0xb9, 0x0e, 0x99, 0x3e, 0x29, 0x91, 0xb1, 0x2b, 0x23, 0x6e, 0x48, 0xda, 0x5c,
		0x3d, 0x72, 0x2e, 0x48, 0xf5, 0xaf, 0xc9, 0xc3, 0xd7, 0xaa, 0xd5, 0xbf, 0x96, 0x2c, 0x75, 0xd5,
		0x12, 0x07, 0x57, 0x61, 0xe2, 0xf0, 0xac, 0x47, 0x7f, 0x24, 0x86, 0x33, 0xfb, 0x39, 0xd3, 0xc2,
		0xe4, 0x4a, 0xc8, 0x34, 0x97, 0xac, 0xd5, 0x7d, 0x9f, 0x8f, 0x32, 0xfd, 0xea, 0x47, 0x9e, 0x72,
		0x53, 0xf0, 0xd3, 0x17, 0xe3, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1,
		0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0xc1, 0x4f, 0x53, 0xf1, 0xd3, 0x60, 0xc0, 0x65, 0xb2,
		0x80, 0xc1, 0x3c, 0x9a, 0x36, 0x97, 0xba, 0x66, 0xae, 0x9c, 0x79, 0x6b, 0x1d, 0xbc, 0x15, 0xbc,
		0x15, 0xbc, 0x15, 0xbc, 0x75, 0x2b, 0xbc, 0xb5, 0x51, 0xbf, 0x6d, 0xdc, 0x5e, 0x5d, 0xd7, 0x6f,
		0xb1, 0x3c, 0xbf, 0x6f, 0x10, 0x96, 0x36, 0xdd, 0xb2, 0x66, 0x2e, 0x40, 0x18, 0x20, 0x0c, 0x10,
		0x06, 0x08, 0x03, 0x84, 0x01, 0xc2, 0xf2, 0x84, 0xb0, 0x48, 0x7c, 0x11, 0xc1, 0xa3, 0xa0, 0x91,
		0xc8, 0x0a, 0xc8, 0x96, 0xce, 0x08, 0x38, 0x03, 0x9c, 0x01, 0xce, 0x00, 0x67, 0x80, 0x33, 0xc0,
		0x59, 0xd6, 0x70, 0x96, 0x24, 0xed, 0xcd, 0x31, 0x6b, 0x38, 0x4c, 0xd3, 0xf5, 0x4c, 0xeb, 0x29,
		0xf4, 0xad, 0xbb, 0x34, 0x4d, 0x20, 0xeb, 0x79, 0xcc, 0x16, 0xd6, 0xdb, 0x81, 0x92, 0x3b, 0x44,
		0x49, 0x2e, 0x22, 0x7f, 0xc4, 0xe3, 0x6c, 0xce, 0xda, 0x6b, 0x18, 0x8c, 0x79, 0x27, 0x22, 0x3f,
		0x7e, 0xc8, 0xe7, 0xad, 0xfa, 0x89, 0x2c, 0xa8, 0xee, 0x2e, 0xe8, 0x2d, 0x0c, 0x17, 0x86, 0x0b,
		0x7a, 0x0b, 0x7a, 0xbb, 0x1d, 0x7a, 0x8b, 0x8d, 0x32, 0x59, 0xd1, 0x5b, 0x6c, 0x94, 0xc1, 0x46,
		0x19, 0x4b, 0x4c, 0xc4, 0x46, 0x19, 0x2b, 0x13, 0x26, 0x85, 0x2f, 0x02, 0xb6, 0x70, 0x16, 0x25,
		0xb7, 0x4b, 0xbb, 0x9c, 0xa9, 0x48, 0xea, 0xe3, 0x77, 0x2a, 0x06, 0x19, 0xdf, 0xec, 0xce, 0xa4,
		0x9e, 0x36, 0x6b, 0x46, 0x39, 0xf3, 0xc2, 0xfb, 0xc1, 0x2a, 0x97, 0x48, 0x24, 0x6b, 0x96, 0xf9,
		0x2a, 0x83, 0xf4, 0x82, 0x19, 0x9c, 0xd8, 0xe8, 0x88, 0x62, 0x52, 0x85, 0xf4, 0xd1, 0x55, 0xfd,
		0x18, 0x46, 0x2a, 0x95, 0xd9, 0xaa, 0xf4, 0xee, 0x9d, 0x60, 0x3e, 0x3f, 0x23, 0x27, 0xe3, 0x52,
		0xf4, 0x13, 0x13, 0x00, 0x49, 0x07, 0x1c, 0xcb, 0xcb, 0xc0, 0x89, 0x08, 0x14, 0x09, 0xa3, 0xc1,
		0x20, 0x90, 0x8a, 0x3b, 0x24, 0x10, 0x44, 0xf5, 0xdd, 0x90, 0x4c, 0x8a, 0xe6, 0x4d, 0xb5, 0x2b,
		0x05, 0x48, 0x64, 0x09, 0x0e, 0x99, 0x80, 0xc2, 0xbc, 0xa6, 0x1b, 0x49, 0x2d, 0x27, 0x07, 0x9d,
		0x69, 0x38, 0x66, 0xa1, 0xdc, 0x23, 0x6e, 0x54, 0xa9, 0x9c, 0xb7, 0x25, 0x67, 0x5f, 0x92, 0x2e,
		0x46, 0x81, 0xc3, 0xf7, 0x42, 0x89, 0x3b, 0x49, 0x2e, 0x21, 0x92, 0x31, 0x68, 0x90, 0xc7, 0x3e,
		0x17, 0x64, 0xee, 0x19, 0x63, 0xc8, 0xe6, 0x22, 0xfe, 0xa5, 0x03, 0x9d, 0x5e, 0xa9, 0xd3, 0x06,
		0x42, 0xdc, 0xad, 0x8a, 0x67, 0x82, 0x05, 0x03, 0xc9, 0x43, 0x2e, 0x3a, 0xb9, 0x72, 0x86, 0x9f,
		0x46, 0x12, 0xe5, 0x21, 0x51, 0x7d, 0x4e, 0xe6, 0x45, 0x3e, 0x60, 0x92, 0xf9, 0x5c, 0x71, 0x19,
		0x6e, 0x3f, 0x21, 0x35, 0x7c, 0xf3, 0x5d, 0x92, 0x07, 0x5d, 0xd1, 0x6c, 0x5f, 0x77, 0x0e, 0xa3,
		0x89, 0x8d, 0x19, 0xfb, 0xb4, 0xec, 0x63, 0x13, 0x48, 0xff, 0x27, 0x1d, 0x3e, 0xb7, 0xa6, 0x93,
		0xcd, 0x2b, 0x03, 0x29, 0xea, 0x4a, 0xcf, 0x52, 0x6a, 0xa5, 0xb5, 0x5d, 0x75, 0x8c, 0xe5, 0xb3,
		0x5c, 0x24, 0x8b, 0x2f, 0xbc, 0xe4, 0x65, 0x4b, 0x6e, 0xd7, 0x15, 0x0e, 0x5f, 0x9d, 0xcd, 0x9a,
		0x78, 0x90, 0xf1, 0x85, 0x2b, 0x04, 0xb6, 0x3e, 0xe5, 0xbe, 0x71, 0x07, 0x89, 0x4e, 0x4a, 0xdd,
		0x34, 0x85, 0xae, 0xeb, 0xa1, 0x8c, 0x53, 0xe4, 0xc6, 0xfe, 0xc7, 0x22, 0x05, 0x6e, 0xa6, 0xae,
		0x1b, 0x53, 0xda, 0xfa, 0x29, 0x6c, 0x8d, 0x94, 0xb5, 0x66, 0x8a, 0x5a, 0xc3, 0xe9, 0x98, 0xa4,
		0xa0, 0x4d, 0x53, 0xce, 0xd6, 0xe9, 0x51, 0xf3, 0x74, 0xa8, 0xce, 0xaa, 0x98, 0x49, 0xca, 0xd8,
		0x7a, 0x07, 0xc4, 0x36, 0xdf, 0xd9, 0xd2, 0x0f, 0xb7, 0x52, 0x38, 0x2b, 0x8f, 0x85, 0x8a, 0x76,
		0xfa, 0x23, 0xed, 0xdb, 0xe0, 0xb0, 0x66, 0x2f, 0x86, 0xd3, 0x3a, 0x68, 0xa7, 0xe5, 0x30, 0xc5,
		0x29, 0x13, 0x0e, 0x55, 0xae, 0xcf, 0xa9, 0xc3, 0x3d, 0xc5, 0x34, 0x3c, 0x58, 0x6d, 0x4d, 0x0f,
		0xd0, 0xd2, 0x07, 0x2e, 0x7a, 0x09, 0x68, 0xef, 0xc6, 0x87, 0xd5, 0x8f, 0xc8, 0x89, 0x5d, 0xd4,
		0x8b, 0xe3, 0xbc, 0xd6, 0x68, 0xd4, 0xef, 0x4c, 0x29, 0x2e, 0xc5, 0x46, 0x95, 0x2a, 0x35, 0x9b,
		0xce, 0xb7, 0xc6, 0x33, 0x8d, 0x7f, 0xd4, 0xc7, 0x3f, 0x3e, 0x0d, 0x7f, 0xdc, 0xcd, 0xfd, 0x28,
		0x37, 0x9b, 0x95, 0x66, 0xd3, 0xf9, 0xe1, 0xf4, 0xc7, 0xf2, 0xdf, 0xbf, 0xdf, 0x37, 0x9b, 0x3f,
		0x34, 0x9b, 0xb4, 0x35, 0x77, 0xc5, 0x69, 0x29, 0x1f, 0x3f, 0x1b, 0x04, 0x83, 0x36, 0xeb, 0x7c,
		0x49, 0xa2, 0x6d, 0x0d, 0x4f, 0x3b, 0x77, 0x79, 0x4a, 0x5f, 0x5b, 0x85, 0xaf, 0xdd, 0xa9, 0xaf,
		0x6d, 0x07, 0x81, 0xc7, 0x99, 0xd0, 0xf1, 0xaf, 0x35, 0xa3, 0x47, 0x30, 0x58, 0x50, 0xd1, 0x4b,
		0x8f, 0x1b, 0xb4, 0xf0, 0x2c, 0x57, 0xc8, 0xeb, 0xa1, 0x6b, 0x28, 0x6b, 0x2d, 0x96, 0xda, 0xa5,
		0x07, 0x97, 0x1b, 0xc4, 0x7c, 0x96, 0x56, 0x77, 0x0b, 0x93, 0x45, 0x76, 0x25, 0x8b, 0x2c, 0x5f,
		0xaa, 0xd4, 0xca, 0x9c, 0x16, 0xaf, 0x93, 0xc1, 0x3e, 0x2c, 0xf0, 0x19, 0x68, 0xcf, 0x28, 0xdf,
		0x6c, 0x9c, 0x6c, 0xce, 0x5c, 0x8b, 0x32, 0x4f, 0x2e, 0x17, 0x51, 0xcd, 0xb2, 0x4e, 0x1e, 0x3f,
		0xef, 0x65, 0x28, 0xe4, 0xab, 0x68, 0x33, 0x30, 0xc7, 0x17, 0x01, 0x8e, 0x0f, 0x3e, 0x5f, 0x53,
		0xbb, 0xd2, 0x40, 0xe3, 0xab, 0xbd, 0xcd, 0xd7, 0xd4, 0x2e, 0xab, 0x47, 0x14, 0xed, 0xdc, 0xee,
		0xe5, 0xdb, 0x66, 0xeb, 0xa1, 0xf6, 0x90, 0xe1, 0xed, 0x08, 0xa3, 0x7d, 0x15, 0x01, 0x99, 0x97,
		0xfb, 0x4d, 0x0b, 0xd1, 0x1c, 0x30, 0x1e, 0x8f, 0x16, 0x6c, 0x36, 0x00, 0x72, 0x72, 0x15, 0x10,
		0xf9, 0xa0, 0x11, 0x79, 0xb2, 0x9c, 0x47, 0x99, 0xe7, 0x1d, 0x78, 0x1a, 0xf2, 0xe2, 0x78, 0x70,
		0xb9, 0x5e, 0x45, 0x16, 0x72, 0xf6, 0xc2, 0xb2, 0xdf, 0xf3, 0x55, 0xf5, 0x7b, 0xf2, 0x5f, 0x1a,
		0x2a, 0x26, 0x9c, 0xf6, 0xd7, 0xef, 0xe1, 0xd7, 0x50, 0x71, 0xbf, 0xfa, 0xdd, 0x0b, 0xca, 0xd5,
		0xef, 0xb5, 0xfb, 0x2a, 0xbd, 0x6d, 0x25, 0xff, 0xf9, 0x5e, 0x2f, 0xdf, 0x57, 0x69, 0x63, 0xf4,
		0x97, 0xcb, 0xfb, 0x2a, 0xbd, 0x6c, 0x9d, 0x7e, 0xbf, 0xaf, 0x4d, 0x7e, 0x9f, 0xfc, 0xf1, 0xf4,
		0xfb, 0x78, 0x81, 0x9b, 0x96, 0x93, 0x7f, 0x28, 0x37, 0x9b, 0xce, 0xe9, 0xb7, 0xea, 0x59, 0xed,
		0xb9, 0x7c, 0x7e, 0xcf, 0xda, 0x1d, 0xa7, 0x75, 0xfa, 0x63, 0xf9, 0xfc, 0xc5, 0xaf, 0x4e, 0x7f,
		0x3c, 0x2f, 0xbf, 0xbc, 0xfc, 0xf4, 0x7b, 0x39, 0xbe, 0x7b, 0xad, 0x15, 0xff, 0xcb, 0xf7, 0x72,
		0xad, 0x7e, 0x5f, 0xa5, 0x37, 0xad, 0xd3, 0xd3, 0xd3, 0xef, 0xae, 0x6c, 0xdb, 0x3d, 0x9a, 0xc7,
		0x7a, 0xfa, 0xb7, 0xc9, 0x27, 0xad, 0x1a, 0x0c, 0xb8, 0xa4, 0x4e, 0xf0, 0x28, 0xa8, 0xe4, 0x2c,
		0x5c, 0xb3, 0xb5, 0x60, 0xae, 0xdf, 0xc3, 0xdc, 0x08, 0x2c, 0x64, 0x1d, 0x34, 0x76, 0x0c, 0x02,
		0xa9, 0xa8, 0xe6, 0x47, 0x25, 0x9a, 0x35, 0x9f, 0x1b, 0x6a, 0x3c, 0x57, 0x3d, 0xf4, 0xbb, 0xa7,
		0xc4, 0xb9, 0xad, 0xf6, 0x12, 0xfa, 0x9f, 0x6d, 0x2a, 0x53, 0xfe, 0xa4, 0xee, 0xc2, 0x7e, 0xf0,
		0x48, 0x5d, 0x3f, 0x7e, 0x55, 0xb6, 0x79, 0x6f, 0x57, 0xba, 0xaf, 0xd9, 0x77, 0x7b, 0x7d, 0xd3,
		0xaf, 0xd8, 0xd2, 0xb7, 0xd5, 0x50, 0xad, 0x2b, 0x5d, 0x9d, 0xb7, 0xd2, 0xe1, 0xb5, 0xb0, 0xcf,
		0x83, 0xb6, 0x4f, 0xbd, 0xca, 0x6c, 0x58, 0xe5, 0xae, 0xac, 0x72, 0xe6, 0xc8, 0xbc, 0x8d, 0x56,
		0xb9, 0xf1, 0x78, 0xbd, 0x0d, 0x87, 0xcb, 0xc1, 0x2a, 0xf3, 0xb5, 0xca, 0x4d, 0x87, 0xc1, 0x95,
		0x3a, 0x4c, 0x4a, 0x97, 0x4b, 0xaa, 0x24, 0x13, 0xa1, 0x1b, 0xdb, 0x64, 0xa8, 0x7f, 0xca, 0xe0,
		0xb2, 0xc1, 0x7a, 0x67, 0x0d, 0x56, 0x71, 0xd6, 0x60, 0x86, 0x69, 0xa1, 0x9d, 0x9d, 0x35, 0xa8,
		0x5d, 0xe5, 0x9f, 0xf6, 0xe4, 0x61, 0x83, 0x13, 0x87, 0x4d, 0x4f, 0x1a, 0xb6, 0x39, 0x61, 0xd8,
		0xb0, 0x7f, 0x80, 0x41, 0x76, 0xd1, 0xa6, 0x5f, 0x80, 0x6d, 0x9f, 0x80, 0xd4, 0xb5, 0xed, 0xf6,
		0x35, 0xed, 0x06, 0xfd, 0x00, 0xac, 0xfa, 0x00, 0x64, 0x78, 0x32, 0xf0, 0x2e, 0xa5, 0xb4, 0x9d,
		0x22, 0x07, 0xab, 0x83, 0x69, 0x5d, 0x31, 0xd3, 0xa8, 0x7e, 0xc0, 0x3a, 0x5f, 0xb8, 0x32, 0x40,
		0x8e, 0xa5, 0xa3, 0x01, 0x1d, 0x80, 0x0e, 0x40, 0x07, 0xa0, 0x03, 0xd0, 0x51, 0x78, 0xe8, 0x70,
		0xdc, 0xb0, 0xc3, 0xa4, 0xc3, 0x1d, 0x2b, 0xe8, 0x58, 0x1c, 0x0d, 0xe8, 0x00, 0x74, 0x00, 0x3a,
		0x00, 0x1d, 0x80, 0x8e, 0x83, 0x81, 0x8e, 0xa2, 0xb4, 0x06, 0x52, 0xd2, 0x75, 0xb8, 0x50, 0x17,
		0x24, 0x90, 0xe4, 0xe5, 0xaf, 0x02, 0x9f, 0xf5, 0xd9, 0xe3, 0x97, 0x0b, 0x74, 0x0c, 0xd2, 0x15,
		0x54, 0x51, 0x08, 0xce, 0x70, 0x6b, 0x98, 0x0d, 0xb9, 0x99, 0x1f, 0x09, 0x62, 0x03, 0x62, 0x03,
		0x62, 0x03, 0x62, 0x03, 0x62, 0x53, 0xf8, 0x98, 0xb8, 0xdb, 0x09, 0x53, 0xc0, 0xc6, 0xe2, 0x68,
		0x40, 0x07, 0xa0, 0x03, 0xd0, 0x01, 0xe8, 0x00, 0x74, 0x14, 0x1e, 0x3a, 0xa6, 0xe7, 0x6d, 0xda,
		0x40, 0xc7, 0xe2, 0x68, 0x40, 0x07, 0xa0, 0x03, 0xd0, 0x01, 0xe8, 0x00, 0x74, 0x14, 0x1e, 0x3a,
		0x82, 0x8e, 0x32, 0xc5, 0x8b, 0xd1, 0x10, 0x80, 0x04, 0x40, 0x02, 0x20, 0x01, 0x90, 0x00, 0x48,
		0x14, 0x1e, 0x24, 0xc6, 0xe7, 0xc3, 0xd9, 0x44, 0x17, 0x2f, 0xc7, 0x02, 0x36, 0x00, 0x1b, 0x80,
		0x0d, 0xc0, 0x06, 0x60, 0xa3, 0xd8, 0xb0, 0x31, 0x6c, 0x0d, 0xec, 0x71, 0x26, 0xf5, 0xe1, 0x62,
		0x66, 0x0c, 0x60, 0x02, 0x30, 0xb1, 0x46, 0xf6, 0x66, 0xdd, 0x8a, 0x5f, 0xaa, 0x4d, 0x4d, 0x07,
		0x26, 0x34, 0xdb, 0x86, 0x6c, 0xdb, 0x87, 0xd7, 0xe1, 0xc4, 0x17, 0x64, 0xa2, 0xdb, 0xfd, 0xb8,
		0x48, 0x2e, 0x5b, 0x43, 0x83, 0x75, 0xfb, 0x94, 0x4c, 0x06, 0x6c, 0xa7, 0x6b, 0x72, 0x9e, 0xa8,
		0x13, 0x44, 0x2a, 0x4d, 0x5d, 0xd2, 0xf2, 0xe1, 0xc0, 0x22, 0x60, 0x11, 0x42, 0x16, 0x84, 0x2c,
		0x08, 0x59, 0x8a, 0x1d, 0xb2, 0xc4, 0xde, 0x3f, 0x45, 0x65, 0xd2, 0xf2, 0xe1, 0x00, 0x0f, 0x80,
		0x07, 0xc0, 0x03, 0xe0, 0x01, 0xf0, 0x28, 0x3e, 0x78, 0x58, 0x6e, 0xdf, 0x5d, 0x1c, 0x0a, 0xd0,
		0x00, 0x68, 0x00, 0x34, 0x00, 0x1a, 0x00, 0x8d, 0xe2, 0x83, 0x86, 0xef, 0x26, 0xae, 0xdf, 0x74,
		0x23, 0xd6, 0xe2, 0x50, 0x80, 0x06, 0x40, 0x03, 0xa0, 0x01, 0xd0, 0x00, 0x68, 0x1c, 0x0c, 0x68,
		0x14, 0xa5, 0x09, 0xc2, 0xc0, 0x63, 0xaa, 0x1b, 0x48, 0x9f, 0x5e, 0xd7, 0xeb, 0x55, 0xea, 0xd4,
		0x97, 0xd4, 0xf8, 0xbf, 0xb8, 0x04, 0x3d, 0x11, 0x6c, 0xe5, 0x56, 0x34, 0xe2, 0x63, 0x15, 0x2e,
		0xbf, 0x18, 0x0b, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea,
		0x03, 0xea, 0xb3, 0xf7, 0xd4, 0xc7, 0xbe, 0x60, 0x7b, 0xf9, 0x70, 0x10, 0x20, 0x10, 0x20, 0x10,
		0x20, 0x10, 0x20, 0x10, 0xa0, 0xe2, 0x2f, 0x18, 0xd8, 0xac, 0x14, 0x60, 0x89, 0x00, 0x30, 0x01,
		0x98, 0x00, 0x4c, 0x00, 0x26, 0x8e, 0x06, 0x26, 0xac, 0x8b, 0xb6, 0x97, 0x0d, 0x06, 0x70, 0x00,
		0x38, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x47, 0x01, 0x80, 0x63, 0x3f, 0x4e, 0x4b, 0x75, 0xb8, 0xe7,
		0x3e, 0x70, 0xf9, 0x95, 0x8a, 0xc0, 0xe1, 0x34, 0x78, 0xe0, 0x52, 0xba, 0x4e, 0xbe, 0x87, 0xa6,
		0xc6, 0x97, 0x97, 0x6c, 0x00, 0xd5, 0xfa, 0x44, 0x58, 0x25, 0x39, 0xf3, 0xa9, 0x1f, 0xe4, 0xfc,
		0x62, 0x21, 0xf3, 0x07, 0x1e, 0x7f, 0x7d, 0x69, 0x7c, 0x22, 0xec, 0x8a, 0x8f, 0xfe, 0x46, 0x88,
		0x40, 0x0d, 0x8f, 0xe8, 0x5d, 0x7b, 0x7c, 0x68, 0xd8, 0xe9, 0x73, 0x9f, 0x0d, 0x58, 0x52, 0x27,
		0x5d, 0x3a, 0x9f, 0x01, 0xa9, 0x18, 0x03, 0xba, 0xac, 0xc3, 0xc3, 0xf3, 0xc9, 0x1f, 0xcf, 0x37,
		0x9e, 0x16, 0x3b, 0x9c, 0x53, 0xc9, 0xa8, 0xa3, 0xc4, 0x08, 0x59, 0xfe, 0x94, 0xde, 0xaf, 0xf1,
		0x8c, 0xef, 0x27, 0x13, 0x7e, 0x9e, 0xfc, 0xf1, 0xf3, 0x9f, 0xd3, 0x09, 0x53, 0x1c, 0x19, 0x1f,
		0x46, 0xed, 0xc9, 0x33, 0x6a, 0x1c, 0x79, 0x3b, 0x7b, 0x75, 0xca, 0x43, 0x6f, 0xab, 0x38, 0xf4,
		0x76, 0x17, 0x87, 0xde, 0x32, 0xc7, 0x77, 0xc5, 0x86, 0x83, 0xc7, 0x17, 0xe4, 0x3c, 0x3b, 0x68,
		0xc3, 0x0b, 0x4e, 0x79, 0xc7, 0x66, 0x22, 0x51, 0xe2, 0x22, 0x59, 0xe0, 0x5a, 0x7b, 0x61, 0x0b,
		0xf4, 0x1b, 0xf4, 0x3b, 0x13, 0xdd, 0x24, 0x9a, 0x47, 0xab, 0x4f, 0xe1, 0x7f, 0xed, 0x11, 0xeb,
		0xba, 0xaf, 0xb4, 0x91, 0x44, 0x98, 0x71, 0xea, 0xac, 0x8e, 0x60, 0xcf, 0x56, 0x47, 0xd6, 0x1f,
		0xc9, 0xae, 0xa7, 0x1b, 0xad, 0x1c, 0x96, 0xc5, 0xfd, 0x28, 0x54, 0x79, 0x2e, 0x88, 0x97, 0xcb,
		0x15, 0xf2, 0x9a, 0x9c, 0x0c, 0x1d, 0xd9, 0xc9, 0x29, 0x61, 0xc2, 0x21, 0xa1, 0x62, 0x52, 0x85,
		0xf4, 0xd1, 0x55, 0xfd, 0x72, 0xa5, 0x72, 0x5e, 0xa9, 0xcc, 0x72, 0x83, 0xee, 0x5d, 0x8c, 0xee,
		0x67, 0xe4, 0x24, 0xfc, 0x1a, 0x2a, 0xee, 0x57, 0x4f, 0x4e, 0x4f, 0x49, 0x20, 0x89, 0x08, 0x54,
		0xd9, 0x74, 0x9c, 0xc9, 0x52, 0xfa, 0x3b, 0x29, 0x03, 0xf9, 0x91, 0x87, 0x21, 0xeb, 0x59, 0x2c,
		0xa8, 0x2f, 0xb1, 0x35, 0x12, 0x4b, 0x96, 0xb4, 0x39, 0x19, 0xf9, 0x70, 0xc3, 0x00, 0xc2, 0x72,
		0x69, 0xff, 0xa5, 0x01, 0x0c, 0x2b, 0xc7, 0xfc, 0xd1, 0x7b, 0x9d, 0x99, 0xcf, 0x95, 0x76, 0x95,
		0x7f, 0xc1, 0x10, 0xd6, 0x88, 0xc8, 0x68, 0xe2, 0xe7, 0xbd, 0xec, 0xaa, 0x22, 0x79, 0x97, 0x4b,
		0x2e, 0x3a, 0xb9, 0x6e, 0x32, 0xf9, 0xe3, 0x97, 0x9f, 0x48, 0xfd, 0xe6, 0xea, 0xe2, 0x8e, 0x7c,
		0xea, 0x73, 0x32, 0x25, 0xbf, 0xe4, 0x6f, 0x32, 0x88, 0x06, 0xe4, 0xe3, 0xfb, 0xb7, 0x84, 0x12,
		0xb7, 0xfb, 0x26, 0x96, 0x74, 0xcc, 0x82, 0xa3, 0x70, 0xcb, 0x9b, 0x4a, 0xa6, 0x52, 0xd8, 0xe5,
		0x9e, 0x12, 0x0b, 0x31, 0x15, 0x22, 0xbf, 0xcb, 0xc4, 0xd7, 0x24, 0x3d, 0xdb, 0x7b, 0x34, 0x20,
		0xb0, 0xd3, 0x31, 0x7a, 0x74, 0xb2, 0xb6, 0x2f, 0x74, 0x92, 0xba, 0x83, 0x62, 0x33, 0xca, 0xf8,
		0x05, 0x73, 0x26, 0x95, 0x9b, 0x82, 0xa2, 0x25, 0xaa, 0x45, 0x7d, 0xd6, 0xd1, 0x97, 0xe6, 0xa2,
		0x9a, 0x25, 0xe3, 0x35, 0x25, 0xa3, 0x17, 0xc1, 0x18, 0xab, 0x9e, 0x8d, 0x0a, 0x66, 0xa0, 0x8a,
		0x59, 0x3a, 0x5a, 0x23, 0xd5, 0xcc, 0xc7, 0xcb, 0x1a, 0xab, 0xaa, 0xa1, 0x0b, 0xd5, 0xfc, 0x86,
		0xda, 0x71, 0xd1, 0xc2, 0x17, 0xf4, 0x59, 0x87, 0x32, 0xc7, 0x91, 0x3c, 0x34, 0x82, 0x49, 0x83,
		0x6e, 0x81, 0x53, 0x45, 0x33, 0xec, 0xb9, 0x36, 0x19, 0x78, 0x5f, 0xa5, 0xb7, 0x8c, 0x76, 0xdf,
		0xd0, 0x5f, 0x5a, 0xdf, 0xea, 0xcf, 0xe5, 0xbb, 0xf9, 0xbf, 0x9f, 0x7e, 0xbb, 0x7c, 0xd6, 0x97,
		0x7b, 0x2b, 0x23, 0xe8, 0xd2, 0xf8, 0x32, 0x2f, 0xec, 0x9d, 0x06, 0xd2, 0xed, 0x19, 0x2c, 0x76,
		0xac, 0x70, 0x1b, 0xe3, 0x69, 0x72, 0xf6, 0x1e, 0x75, 0x78, 0x0f, 0x78, 0x8f, 0x5c, 0x55, 0xd3,
		0x34, 0xdf, 0x62, 0x98, 0x77, 0xc9, 0xd6, 0x94, 0x1f, 0x5c, 0xa9, 0x22, 0xe6, 0x51, 0x19, 0x44,
		0x8a, 0x4b, 0xea, 0x3a, 0xe6, 0x66, 0xbc, 0x38, 0x85, 0xe6, 0xe7, 0x31, 0xc9, 0x99, 0x4e, 0x06,
		0xd5, 0xf4, 0x94, 0xa9, 0x05, 0x12, 0x02, 0x37, 0xb2, 0x73, 0x37, 0x12, 0xb9, 0x42, 0xdd, 0x58,
		0xb8, 0x0d, 0x83, 0x85, 0x6d, 0xc3, 0x0d, 0x0c, 0xe6, 0xf9, 0x89, 0xc9, 0x8d, 0x6c, 0x36, 0x34,
		0x4c, 0x06, 0x4f, 0x56, 0xf1, 0xcf, 0xec, 0xc6, 0xa7, 0x5d, 0xba, 0x9f, 0x7e, 0x1a, 0xdb, 0x25,
		0x7c, 0x43, 0xad, 0x99, 0x17, 0x9d, 0xc5, 0xc6, 0x87, 0x05, 0xd1, 0xd5, 0x2f, 0x2f, 0x0f, 0x5f,
		0x78, 0x39, 0x25, 0x03, 0x5b, 0x99, 0x1a, 0xbc, 0x45, 0xc6, 0x3d, 0x45, 0xaa, 0x30, 0x85, 0x49,
		0x4e, 0x5a, 0xa3, 0x4b, 0xd6, 0x55, 0xd4, 0xe5, 0xaa, 0x4b, 0xdb, 0x3c, 0x0c, 0x29, 0x7f, 0x18,
		0x88, 0xe1, 0x7a, 0x3c, 0x0d, 0xa3, 0xb6, 0xe0, 0x8a, 0x76, 0x03, 0xf9, 0xc8, 0xa4, 0xe3, 0x8a,
		0x9e, 0x4d, 0xba, 0x38, 0x45, 0xda, 0x3a, 0xab, 0x24, 0x62, 0xa6, 0xa9, 0xeb, 0x05, 0xa4, 0x31,
		0x12, 0xe0, 0xa1, 0x69, 0x7d, 0xce, 0x69, 0xa6, 0xfd, 0x2e, 0xdb, 0x4c, 0xaa, 0x0a, 0xb5, 0xf3,
		0xa0, 0x59, 0x93, 0xa8, 0x3d, 0xaa, 0xc3, 0x7c, 0x29, 0x88, 0xbd, 0x5c, 0x68, 0xc9, 0x7b, 0xdd,
		0x72, 0x71, 0xad, 0x31, 0x59, 0x5e, 0x3c, 0x71, 0x65, 0xfb, 0x64, 0x07, 0x0b, 0x8b, 0xbf, 0x09,
		0xef, 0x2b, 0x09, 0xa3, 0xc1, 0x20, 0x90, 0x8a, 0x3b, 0x24, 0x10, 0xe4, 0xfd, 0x1f, 0x6f, 0xc9,
		0xec, 0x76, 0xa3, 0x10, 0x2b, 0x8c, 0x23, 0x1d, 0xd6, 0x91, 0x55, 0x01, 0x96, 0x1a, 0x07, 0x92,
		0x87, 0x79, 0xaf, 0x34, 0xbe, 0x4b, 0x16, 0x66, 0x89, 0xea, 0x73, 0x32, 0x75, 0x08, 0xa4, 0x1b,
		0x89, 0x84, 0x25, 0x32, 0xcf, 0x55, 0x5f, 0x89, 0x2b, 0x92, 0xdf, 0xcf, 0xca, 0xb7, 0xb2, 0xfd,
		0x08, 0x34, 0xdc, 0xf9, 0x72, 0xa3, 0xb5, 0xac, 0x0e, 0xac, 0xf9, 0x82, 0xe6, 0xf6, 0xcf, 0xc9,
		0xf5, 0x86, 0xdb, 0x40, 0x67, 0x44, 0x73, 0x6e, 0x84, 0xc6, 0x46, 0x7b, 0x43, 0x67, 0xee, 0xf2,
		0xf9, 0xcd, 0xf0, 0x2e, 0x7f, 0xdb, 0x80, 0x74, 0x76, 0x8b, 0xb1, 0x6d, 0xe9, 0x3a, 0x3d, 0x4e,
		0xf5, 0x18, 0xcf, 0xc4, 0xee, 0xe6, 0x46, 0x1d, 0xda, 0x82, 0x6c, 0x5b, 0x15, 0x7c, 0x41, 0xb6,
		0xad, 0xf6, 0x66, 0x41, 0x76, 0x74, 0xa4, 0x00, 0x8d, 0xc4, 0x17, 0x11, 0x3c, 0x0a, 0x1a, 0xca,
		0x8e, 0xdd, 0xca, 0xec, 0xaa, 0x89, 0xf2, 0xcc, 0xd0, 0x26, 0x99, 0x81, 0x23, 0xcd, 0xd2, 0x6a,
		0x19, 0x49, 0x91, 0xb3, 0xb4, 0x3a, 0x46, 0xb4, 0x6f, 0x59, 0xda, 0x76, 0x10, 0x78, 0x9c, 0x59,
		0x2d, 0xef, 0xd4, 0xb6, 0xb8, 0x54, 0xe3, 0xb3, 0x0e, 0x75, 0xa2, 0x81, 0xe7, 0x76, 0xf4, 0x61,
		0x9a, 0xbc, 0x5c, 0x12, 0x9f, 0x9d, 0xc0, 0xcc, 0xf8, 0x6a, 0x30, 0x3e, 0x18, 0x5f, 0x5a, 0x64,
		0x9b, 0x0c, 0x18, 0x26, 0xa4, 0x53, 0x6c, 0xc9, 0xed, 0x18, 0xa8, 0x70, 0x2a, 0x3c, 0x9b, 0x0c,
		0x8e, 0x42, 0x4e, 0x05, 0x57, 0xd4, 0x15, 0x61, 0xb2, 0xd1, 0x9c, 0x8e, 0x9e, 0xc1, 0x68, 0xa6,
		0x96, 0xe1, 0x13, 0x9b, 0x21, 0x9f, 0xb5, 0x11, 0xa6, 0x31, 0xc6, 0x0c, 0x8d, 0x32, 0x8f, 0x84,
		0xb3, 0x95, 0x91, 0xe6, 0x9b, 0x6d, 0xb6, 0x36, 0x5a, 0xcb, 0x84, 0xb2, 0xa1, 0x0e, 0x18, 0x23,
		0xe9, 0x82, 0x06, 0x70, 0x11, 0xf9, 0x5c, 0x32, 0x0b, 0x13, 0x25, 0x96, 0x9b, 0x27, 0xa6, 0x89,
		0x39, 0xa3, 0x4d, 0x14, 0xb9, 0xe5, 0x82, 0x74, 0x83, 0x11, 0xb3, 0xa8, 0x3b, 0x8b, 0xe8, 0x7b,
		0x36, 0x08, 0x3d, 0xb7, 0xa3, 0x04, 0xa9, 0xe2, 0xf2, 0xb7, 0xc9, 0xfd, 0x3f, 0xc5, 0xb7, 0xff,
		0xfc, 0x91, 0x75, 0x7e, 0x9e, 0xb9, 0xfb, 0x96, 0xc9, 0x94, 0xc7, 0x99, 0x14, 0xae, 0xe8, 0xd9,
		0x31, 0xa9, 0xc9, 0x68, 0xd0, 0x28, 0xd0, 0xa8, 0x9d, 0xd1, 0x28, 0x83, 0xb2, 0xd6, 0xd5, 0x5c,
		0xca, 0xa8, 0x94, 0x30, 0x3b, 0x42, 0x65, 0x53, 0x1f, 0x04, 0xfe, 0x04, 0xfe, 0x54, 0x7c, 0xfe,
		0x64, 0x6f, 0x91, 0xfb, 0xcf, 0x9f, 0x0c, 0xb0, 0x85, 0xf5, 0x4c, 0xd0, 0x79, 0x51, 0x8a, 0x3d,
		0xf3, 0xed, 0x2e, 0x86, 0x30, 0x0d, 0x87, 0x01, 0x87, 0x91, 0xde, 0x61, 0x98, 0xc2, 0x7e, 0x26,
		0xf0, 0x9f, 0xb1, 0xd3, 0x49, 0x4d, 0x07, 0x52, 0xd1, 0x02, 0x4b, 0x7a, 0x90, 0x92, 0x26, 0xa4,
		0xb6, 0xfe, 0x2c, 0xbc, 0x40, 0x0e, 0xde, 0x20, 0x2b, 0xaf, 0x90, 0xb9, 0x77, 0xc8, 0xdc, 0x4b,
		0xe4, 0xe3, 0x2d, 0xec, 0xbc, 0x86, 0xa5, 0xf7, 0x48, 0x4f, 0x3b, 0x72, 0xf0, 0x04, 0x69, 0x69,
		0x48, 0x4a, 0x3a, 0x62, 0xff, 0x01, 0xf2, 0x75, 0xf4, 0x96, 0xe9, 0x9e, 0x5c, 0xd2, 0x3e, 0xe3,
		0xfc, 0xc5, 0xb9, 0x0d, 0x4d, 0xca, 0x32, 0x03, 0xf4, 0x61, 0xf4, 0x20, 0x9f, 0xdf, 0xf4, 0x8c,
		0x77, 0xd7, 0x1e, 0x73, 0xde, 0xce, 0x30, 0x01, 0x95, 0xc7, 0x27, 0xdb, 0x7a, 0xc6, 0xce, 0xf5,
		0x5d, 0x65, 0x99, 0xae, 0x4b, 0x86, 0x22, 0x57, 0x87, 0x5c, 0xdd, 0xae, 0x72, 0x75, 0x3e, 0x7b,
		0x72, 0xfd, 0xc8, 0xa7, 0x5c, 0x28, 0xe9, 0xf2, 0xd0, 0x3e, 0xae, 0x7d, 0x39, 0xd1, 0x36, 0x73,
		0x76, 0xf5, 0xcb, 0x2a, 0x12, 0x76, 0x88, 0xbf, 0x91, 0xb0, 0x9b, 0xd7, 0x00, 0x57, 0xa8, 0x8b,
		0x7a, 0x8a, 0x54, 0xdd, 0x85, 0xc5, 0x50, 0xbb, 0xc2, 0xcf, 0xf1, 0xff, 0x52, 0x84, 0x09, 0x69,
		0x0a, 0x41, 0x27, 0x93, 0xa4, 0x2c, 0x08, 0x9d, 0xcc, 0x93, 0x55, 0x6d, 0xe3, 0xf4, 0x93, 0xa6,
		0xad, 0x71, 0x4c, 0x19, 0xc7, 0x91, 0xb4, 0x05, 0xa3, 0x0b, 0x22, 0xbe, 0xa9, 0xdd, 0xd6, 0x8b,
		0x2b, 0xe5, 0x2d, 0x05, 0x86, 0xad, 0x3d, 0xc8, 0x87, 0x3f, 0x0e, 0x59, 0x37, 0x55, 0x7d, 0xc9,
		0xc3, 0x7e, 0xe0, 0x39, 0x74, 0xd0, 0x51, 0xf6, 0x3c, 0x62, 0xf9, 0x74, 0xdb, 0x64, 0x13, 0xb7,
		0x97, 0x20, 0x13, 0x20, 0x13, 0x20, 0x13, 0x20, 0x13, 0xd9, 0x20, 0xdd, 0x15, 0xc8, 0x44, 0xde,
		0x64, 0xa2, 0x56, 0xad, 0x82, 0x4b, 0xec, 0x2b, 0x97, 0x28, 0x5e, 0x8e, 0xd3, 0x20, 0x6b, 0x97,
		0x69, 0x82, 0x33, 0xb9, 0x2f, 0xda, 0x2b, 0x68, 0x32, 0x95, 0xa4, 0xb7, 0xc0, 0xf0, 0xe3, 0x39,
		0x38, 0xe9, 0x7a, 0x46, 0x16, 0xc7, 0x5e, 0x62, 0x3e, 0x34, 0x2b, 0x92, 0xd8, 0x15, 0xe9, 0x24,
		0xb4, 0x3a, 0x1a, 0xee, 0x0b, 0x1f, 0xb7, 0x8c, 0x57, 0x9c, 0x74, 0x03, 0x69, 0xdd, 0xf3, 0xa0,
		0x68, 0x75, 0xe6, 0x96, 0x02, 0x43, 0xb1, 0xb9, 0x0e, 0xa4, 0xe4, 0x59, 0x6e, 0x3e, 0x03, 0x20,
		0x79, 0x14, 0x9c, 0x3b, 0x3c, 0xec, 0x48, 0x77, 0xa0, 0x25, 0xb2, 0x69, 0xf5, 0xef, 0xcc, 0x20,
		0x1c, 0x27, 0x83, 0xe3, 0x64, 0x32, 0x51, 0x15, 0x62, 0xd8, 0x26, 0xb9, 0xf4, 0x81, 0x8b, 0x5e,
		0x62, 0xb8, 0xfb, 0x75, 0xc4, 0x62, 0x0d, 0x47, 0x2c, 0xbe, 0x14, 0x89, 0x71, 0x87, 0xc1, 0x22,
		0x9c, 0xa8, 0xa8, 0xa1, 0xc1, 0xa6, 0x0d, 0xbe, 0x4b, 0xf7, 0x6f, 0xe8, 0xdf, 0x19, 0xfd, 0x47,
		0x95, 0xde, 0x92, 0xbf, 0xfc, 0xdb, 0x3f, 0xfd, 0xf3, 0x5f, 0xff, 0xab, 0x19, 0x55, 0xab, 0xf5,
		0xab, 0xf2, 0xe9, 0xf7, 0x1f, 0x5e, 0xff, 0xf7, 0xff, 0x55, 0xce, 0x4e, 0xce, 0x3f, 0xdf, 0xfd,
		0xeb, 0x8f, 0xb4, 0xf5, 0x2f, 0xa5, 0x9c, 0x81, 0xd6, 0x26, 0x78, 0xd8, 0xab, 0xc3, 0x4e, 0x3c,
		0x97, 0xe1, 0x98, 0x93, 0x8d, 0x02, 0x2a, 0xc4, 0x01, 0x27, 0x6e, 0xd7, 0x15, 0x0e, 0x7f, 0xd2,
		0xa7, 0x37, 0xe3, 0x01, 0x19, 0x53, 0x9b, 0x3a, 0xa8, 0x4d, 0xa1, 0xa8, 0x4d, 0xa4, 0x9b, 0x4f,
		0x1f, 0x6b, 0xca, 0x35, 0x8e, 0x8d, 0x2e, 0x0e, 0xa7, 0x69, 0xd4, 0x6f, 0x1b, 0xb7, 0x57, 0xd7,
		0xf5, 0x5b, 0x1c, 0x16, 0x9d, 0x89, 0x93, 0x36, 0x74, 0xd1, 0x79, 0x38, 0x68, 0xc4, 0x9e, 0x70,
		0xd0, 0x70, 0xd0, 0x45, 0x71, 0xd0, 0xb7, 0xb7, 0xb7, 0xb7, 0x70, 0xcd, 0xb9, 0x47, 0x75, 0xdb,
		0x39, 0x11, 0xb6, 0x5a, 0xf4, 0xa3, 0x60, 0x67, 0x73, 0xcb, 0x24, 0x41, 0xb7, 0xc9, 0x71, 0xa7,
		0xd5, 0x61, 0x5e, 0x7e, 0xf8, 0x70, 0x64, 0xd3, 0x81, 0xf1, 0x59, 0x47, 0xb0, 0x64, 0xef, 0x1b,
		0x38, 0x5b, 0x88, 0x6e, 0xdf, 0xfb, 0x39, 0xe7, 0x41, 0xb0, 0x06, 0xd4, 0x57, 0x91, 0x01, 0xc3,
		0x1a, 0x5e, 0x0f, 0x8a, 0x05, 0x8a, 0xb5, 0x81, 0x62, 0xd5, 0xae, 0x0c, 0x28, 0xd6, 0xd5, 0xc1,
		0x52, 0xac, 0x5a, 0xfd, 0x06, 0x2c, 0x6b, 0x91, 0x65, 0x35, 0x6e, 0xae, 0xc0, 0xb2, 0x0e, 0x9e,
		0x65, 0x89, 0x40, 0x11, 0x23, 0x96, 0x74, 0x92, 0x70, 0x2b, 0xbd, 0x11, 0x5e, 0xb0, 0x13, 0x4a,
		0x35, 0x44, 0xb0, 0x98, 0xff, 0xcd, 0x1f, 0xef, 0xa0, 0xfa, 0x6e, 0x08, 0x1a, 0xb5, 0x00, 0x34,
		0x9a, 0xe2, 0x3a, 0x84, 0x2d, 0x86, 0x36, 0x61, 0x46, 0xa5, 0x72, 0xae, 0xbe, 0x0e, 0x38, 0xf9,
		0xcb, 0x6b, 0x72, 0x32, 0xa7, 0xc4, 0xa3, 0x2d, 0x57, 0x27, 0xc3, 0x08, 0x64, 0xf5, 0x75, 0x5e,
		0xd0, 0x61, 0x1e, 0xf5, 0xdd, 0xe4, 0xc3, 0x3a, 0x3c, 0x54, 0x27, 0xbb, 0xd5, 0x79, 0xe6, 0x79,
		0xc1, 0x23, 0x77, 0x48, 0x6c, 0x9c, 0x24, 0x79, 0xe4, 0xd1, 0x9b, 0xc4, 0x86, 0x9b, 0xfc, 0x7d,
		0xe1, 0x89, 0x61, 0x0b, 0x8b, 0xb6, 0x60, 0x23, 0xc6, 0xa3, 0x0c, 0x2f, 0x1e, 0x1a, 0x26, 0xc1,
		0xc5, 0x43, 0xe3, 0xe0, 0x0e, 0xaa, 0xd0, 0x3a, 0x29, 0xf5, 0x90, 0x0f, 0xaa, 0xd0, 0x39, 0x09,
		0x75, 0x4b, 0x07, 0x55, 0x8c, 0x4f, 0x58, 0x37, 0x3f, 0xfb, 0xdb, 0xe8, 0x68, 0xf6, 0xc3, 0x69,
		0xc8, 0x80, 0x63, 0x7a, 0x07, 0x87, 0xd3, 0x3c, 0x75, 0x7a, 0x0e, 0x91, 0x7d, 0x8f, 0x41, 0x9b,
		0x93, 0x05, 0x49, 0x21, 0x6a, 0x13, 0x8d, 0x54, 0x3d, 0x0b, 0x2e, 0x42, 0x0e, 0xac, 0x36, 0xd1,
		0xc4, 0x14, 0xcc, 0x59, 0x06, 0xd9, 0x49, 0x6d, 0xa2, 0xf9, 0x59, 0x29, 0x0b, 0x3e, 0xbc, 0x96,
		0xeb, 0x2b, 0xbe, 0x7b, 0x4a, 0x72, 0x15, 0xe6, 0x75, 0x8c, 0xe9, 0xf5, 0x71, 0xfa, 0xf1, 0xf9,
		0x93, 0xba, 0xeb, 0xba, 0x32, 0x54, 0x54, 0x72, 0x8f, 0xb3, 0xd0, 0xa8, 0x2a, 0x26, 0x7f, 0x2d,
		0xad, 0x57, 0x2b, 0xb5, 0x7a, 0xa5, 0x96, 0xb7, 0x76, 0x9a, 0x56, 0x6b, 0xa7, 0x38, 0x76, 0x79,
		0xca, 0x6f, 0xcd, 0x2b, 0x9f, 0xb2, 0x51, 0x04, 0x92, 0xdd, 0xc1, 0xb3, 0x59, 0xfb, 0xcc, 0x65,
		0xba, 0x6a, 0x5d, 0x36, 0x95, 0x9b, 0x86, 0xae, 0xf4, 0xa7, 0xd6, 0x07, 0xd7, 0xa6, 0xd3, 0x5e,
		0xfb, 0x51, 0x16, 0x4d, 0x48, 0xcd, 0x12, 0x87, 0x79, 0x68, 0xec, 0x42, 0x86, 0x30, 0xcd, 0xf1,
		0xb8, 0xd9, 0x66, 0x4d, 0x56, 0x3e, 0x74, 0xf6, 0xc7, 0xe7, 0xe6, 0x65, 0x7a, 0x59, 0xa7, 0x52,
		0x72, 0xb7, 0x42, 0x92, 0xfb, 0xf1, 0xbb, 0xd9, 0x58, 0x27, 0xd9, 0x76, 0x9b, 0xd5, 0x0c, 0x6c,
		0xad, 0x42, 0x5e, 0x0f, 0x17, 0x44, 0xca, 0x49, 0x72, 0x3e, 0xd9, 0x38, 0x11, 0x7f, 0xb1, 0xf2,
		0x30, 0x75, 0x39, 0xb1, 0xbd, 0xa9, 0xcf, 0x5b, 0xb3, 0x41, 0x62, 0xc1, 0x4c, 0xf7, 0xdf, 0x4e,
		0xdd, 0xee, 0xec, 0x51, 0xba, 0x9d, 0x40, 0x28, 0xe6, 0x0a, 0x2e, 0x89, 0x1b, 0x4e, 0x2a, 0x1e,
		0xad, 0x09, 0x13, 0x0c, 0x77, 0x83, 0xe1, 0xea, 0x09, 0xff, 0xb0, 0x2c, 0xf9, 0x20, 0x9b, 0x39,
		0xb9, 0x03, 0x3a, 0xb0, 0x0b, 0xc9, 0x67, 0x57, 0x11, 0xec, 0xd2, 0x3f, 0xc8, 0x3d, 0x20, 0xf7,
		0x70, 0x78, 0xb9, 0x07, 0x77, 0xf0, 0xd0, 0x18, 0x29, 0x7c, 0x82, 0x80, 0xb4, 0x1f, 0x84, 0x8a,
		0xb6, 0x5d, 0x15, 0xa6, 0x49, 0x47, 0xdc, 0x58, 0x8c, 0x35, 0x2d, 0x08, 0x5c, 0x98, 0xa0, 0x5c,
		0xbe, 0xaf, 0xd2, 0xdb, 0xd6, 0xf7, 0xfb, 0x1a, 0xbd, 0x6d, 0x0d, 0xff, 0x58, 0x4b, 0x7e, 0x0c,
		0xff, 0x5c, 0xbf, 0xaf, 0xd2, 0xc6, 0xf8, 0xcf, 0x97, 0xf7, 0x55, 0x7a, 0xd9, 0x3a, 0x6d, 0x36,
		0x2b, 0xa7, 0xdf, 0x2e, 0x9e, 0xcd, 0x07, 0x9e, 0x8f, 0x6e, 0x76, 0xfa, 0xbd, 0x7c, 0x5f, 0xa3,
		0xf5, 0xd6, 0xf8, 0x2f, 0x17, 0xf7, 0x55, 0x5a, 0x6f, 0x9d, 0x9e, 0x96, 0xf2, 0x76, 0x9f, 0x3b,
		0x48, 0x03, 0xec, 0x3a, 0x9c, 0x5a, 0xe0, 0x6a, 0x67, 0x27, 0xd5, 0xca, 0x92, 0xbd, 0x18, 0x67,
		0x27, 0xb5, 0xfa, 0xf5, 0x8a, 0x5f, 0x5c, 0xdd, 0x56, 0xea, 0x97, 0x8d, 0xd1, 0x2f, 0x25, 0xa7,
		0x3e, 0x53, 0x9d, 0xe4, 0x37, 0xf5, 0xfa, 0x7d, 0x83, 0xde, 0xb6, 0x9a, 0xcd, 0x4a, 0xe5, 0x5f,
		0x96, 0xfc, 0xf6, 0xfe, 0x82, 0x5e, 0x0e, 0x3f, 0xf2, 0xe8, 0x8a, 0x3d, 0x64, 0x84, 0xbf, 0x06,
		0x8a, 0x30, 0xf2, 0xc0, 0x3c, 0xd7, 0x21, 0xef, 0x7f, 0x7f, 0x68, 0x90, 0x48, 0xb8, 0x31, 0x27,
		0x21, 0xa3, 0x75, 0x21, 0x92, 0xcd, 0x31, 0x11, 0x20, 0x81, 0x23, 0x6c, 0xd0, 0x95, 0x37, 0x78,
		0x5f, 0xee, 0xbc, 0x2f, 0x90, 0x6e, 0xcf, 0x4d, 0x71, 0xf2, 0xf1, 0x68, 0xfc, 0x96, 0x19, 0x5f,
		0x1d, 0x8c, 0x0f, 0x8c, 0x6f, 0x07, 0xe7, 0xe0, 0x25, 0xde, 0x89, 0x5a, 0xe9, 0x3c, 0x29, 0xd2,
		0x51, 0x78, 0x03, 0xe9, 0xfa, 0x4c, 0x7e, 0xb5, 0x77, 0x1b, 0xe3, 0x09, 0x10, 0x29, 0xc2, 0x6f,
		0x14, 0xde, 0x6f, 0x70, 0x7f, 0xa0, 0xbe, 0xa6, 0x71, 0x17, 0x17, 0x58, 0xa3, 0xde, 0xb1, 0x8e,
		0x16, 0x78, 0x8d, 0x7a, 0x0f, 0x82, 0x53, 0xb2, 0x7e, 0x25, 0x81, 0x9c, 0xf8, 0x3d, 0x5f, 0x0d,
		0x63, 0xcb, 0x4d, 0x57, 0x8e, 0xeb, 0x0c, 0xf6, 0x31, 0xcc, 0x1c, 0x81, 0xde, 0xe2, 0x66, 0xf9,
		0xf8, 0xf5, 0xc8, 0xa4, 0xe4, 0x10, 0x4b, 0x86, 0xb9, 0x04, 0x9d, 0x76, 0xd2, 0x47, 0x08, 0x9a,
		0x3b, 0x99, 0x0c, 0x15, 0x53, 0x51, 0x8a, 0x03, 0xa8, 0x46, 0xe3, 0x11, 0x82, 0x82, 0x4a, 0x1e,
		0xc7, 0xa2, 0xc3, 0x38, 0x0e, 0xb5, 0x52, 0xfc, 0xfd, 0x8f, 0x43, 0x33, 0xdd, 0x86, 0xfd, 0x1f,
		0xfc, 0xab, 0xcd, 0xda, 0x64, 0xe9, 0x83, 0x1b, 0xaa, 0x37, 0x4a, 0x19, 0xee, 0xe1, 0xfe, 0xe8,
		0x8a, 0x77, 0x1e, 0x8f, 0xb5, 0xd1, 0xb0, 0x42, 0xb5, 0xf4, 0x91, 0x3d, 0xcd, 0x8c, 0xbc, 0x32,
		0xf8, 0x30, 0xa5, 0xdf, 0xa4, 0xc3, 0x25, 0x77, 0xde, 0xc6, 0x2f, 0x2a, 0x22, 0xcf, 0x3b, 0xf4,
		0xb6, 0xfb, 0xb1, 0x8e, 0x9f, 0x9b, 0x55, 0x64, 0x90, 0x34, 0xbd, 0x92, 0xdf, 0x0f, 0x1e, 0x1a,
		0x9f, 0xdf, 0x8c, 0xee, 0xb7, 0xc5, 0x23, 0x44, 0x93, 0x1a, 0x31, 0xea, 0xb8, 0x92, 0x77, 0x14,
		0x77, 0x68, 0x5b, 0x06, 0xcc, 0xe9, 0xb0, 0xd0, 0xe2, 0x44, 0xd1, 0x95, 0x33, 0xe9, 0xd6, 0x2a,
		0x58, 0x9c, 0x9a, 0x54, 0x4a, 0xf6, 0x0c, 0xe9, 0xc9, 0xab, 0x65, 0x56, 0x57, 0x53, 0x45, 0x5d,
		0x0d, 0x41, 0x5d, 0x4d, 0x56, 0x18, 0x9a, 0xa2, 0x58, 0xc0, 0xb0, 0x48, 0x60, 0x1f, 0xcf, 0xde,
		0xc8, 0xbd, 0xd1, 0xd2, 0x6c, 0x65, 0xf3, 0x9a, 0xa2, 0xe7, 0x3d, 0xa9, 0x73, 0x7e, 0x68, 0xbc,
		0x38, 0xc6, 0x60, 0xb6, 0x58, 0x37, 0x10, 0xb3, 0x55, 0xba, 0x0b, 0x4f, 0x9c, 0x2a, 0x2e, 0x2f,
		0x72, 0xd5, 0x73, 0x86, 0x42, 0xdd, 0xf7, 0x1a, 0xe8, 0xfd, 0x3a, 0xcf, 0x24, 0x59, 0x3b, 0x4f,
		0x9a, 0x2d, 0xf0, 0x39, 0x39, 0x1e, 0xf1, 0x89, 0x25, 0x2b, 0x45, 0x82, 0x33, 0x49, 0xd6, 0xf1,
		0xed, 0x3c, 0xcf, 0x22, 0x89, 0xf9, 0x75, 0x29, 0x9f, 0xe6, 0x01, 0x57, 0x46, 0xcd, 0x03, 0xae,
		0xd0, 0x3c, 0x80, 0xa0, 0x79, 0xc0, 0xca, 0x70, 0x0c, 0xcd, 0x03, 0x10, 0xe4, 0xa0, 0x79, 0x00,
		0x9a, 0x07, 0x20, 0x97, 0x8e, 0xe6, 0x01, 0x99, 0xe6, 0x05, 0x6c, 0x5f, 0x11, 0x15, 0xe8, 0xf9,
		0x18, 0xde, 0x32, 0x03, 0x44, 0x05, 0x7a, 0x7e, 0xa3, 0x50, 0x81, 0x9e, 0x6d, 0x3e, 0x6b, 0xe5,
		0x43, 0xa3, 0x02, 0x3d, 0x37, 0x2b, 0x24, 0xa8, 0x40, 0xcf, 0xcd, 0xd6, 0x50, 0x81, 0x8e, 0x0a,
		0xf4, 0x9d, 0x19, 0x2e, 0x2a, 0xd0, 0x51, 0x81, 0x8e, 0x00, 0x16, 0x01, 0xec, 0x01, 0x06, 0xb0,
		0xee, 0xe0, 0xe1, 0xaa, 0x30, 0x15, 0xe8, 0x77, 0xdf, 0xef, 0xab, 0xf4, 0x96, 0xd1, 0xee, 0x1b,
		0xfa, 0x4b, 0xeb, 0x5b, 0xf5, 0xac, 0xf1, 0x7c, 0x7a, 0x77, 0x5a, 0x7e, 0xf9, 0x6f, 0x77, 0xa7,
		0xdf, 0xaa, 0x67, 0x97, 0xcf, 0xe5, 0xf2, 0x92, 0xdf, 0xfc, 0xb8, 0x6c, 0x8e, 0xd3, 0xef, 0xe5,
		0x72, 0x79, 0x54, 0x7b, 0x3e, 0x57, 0x8f, 0x7e, 0x5f, 0xad, 0xb5, 0x7e, 0x4c, 0xfe, 0x38, 0xfc,
		0xef, 0xa4, 0xa2, 0x5d, 0xeb, 0xe2, 0xd3, 0xd3, 0xf2, 0x6c, 0x21, 0x7b, 0xfc, 0xf3, 0x5b, 0xfd,
		0xf9, 0xf4, 0x7b, 0xb9, 0x76, 0x5f, 0xa5, 0xb5, 0x49, 0x51, 0x7b, 0x2d, 0x9e, 0xe4, 0x26, 0xbe,
		0x1c, 0x65, 0xed, 0xd9, 0xf3, 0xc6, 0x98, 0x00, 0x56, 0x5e, 0x9f, 0xdc, 0xdd, 0x9d, 0xd7, 0xea,
		0x37, 0x27, 0x31, 0x25, 0x4c, 0xfe, 0x56, 0x9b, 0xfc, 0xf5, 0x45, 0x0d, 0x7b, 0xb7, 0xbb, 0xb4,
		0xb4, 0xbd, 0xcb, 0x6f, 0xaa, 0x7b, 0x5c, 0x96, 0xde, 0xf3, 0x82, 0x36, 0xf3, 0x26, 0x25, 0xd2,
		0xef, 0x7f, 0x7f, 0xb8, 0x42, 0x5d, 0x7a, 0x9e, 0x75, 0xe9, 0x1a, 0x02, 0x07, 0x1d, 0xcc, 0x9d,
		0x0e, 0xa2, 0x30, 0x1d, 0x44, 0x10, 0x44, 0x50, 0x4f, 0x03, 0x50, 0x98, 0x3e, 0x7e, 0x16, 0x14,
		0xa6, 0xc3, 0x6f, 0xc0, 0x6f, 0xe8, 0x6a, 0x00, 0x0a, 0xd3, 0x57, 0x69, 0x23, 0x0a, 0xd3, 0x5f,
		0x30, 0x42, 0x14, 0xa6, 0xa3, 0x30, 0x1d, 0x2b, 0x89, 0x28, 0x4c, 0x47, 0x61, 0xba, 0x01, 0xc1,
		0x42, 0x61, 0x3a, 0xa8, 0xe4, 0x31, 0xad, 0x45, 0xa0, 0x30, 0xbd, 0xe8, 0x85, 0xe9, 0x26, 0xab,
		0x43, 0x45, 0x2c, 0x4c, 0xbf, 0xda, 0x72, 0x61, 0xfa, 0x55, 0xe6, 0x85, 0xe9, 0xa8, 0x40, 0xdd,
		0x71, 0x05, 0xea, 0x15, 0x2a, 0x50, 0xb3, 0xaf, 0x40, 0xbd, 0x42, 0x05, 0xea, 0x6c, 0x12, 0x74,
		0x9b, 0x15, 0xa8, 0x57, 0xa8, 0x40, 0x7d, 0x59, 0x81, 0x7a, 0x85, 0x0a, 0x54, 0x63, 0x60, 0xcd,
		0xb9, 0x02, 0xf5, 0x2a, 0x8f, 0x0a, 0x54, 0xaf, 0x4e, 0x7d, 0x15, 0xe9, 0xd7, 0xa0, 0x8e, 0xae,
		0xd7, 0xab, 0x42, 0xad, 0xee, 0x4b, 0x15, 0x6a, 0xb1, 0x4b, 0x50, 0xf3, 0xae, 0x3f, 0xd5, 0x0e,
		0xad, 0x26, 0xb2, 0x8f, 0x5c, 0xa1, 0x6a, 0x5a, 0xf6, 0x30, 0xd2, 0x94, 0x2b, 0x8d, 0x4b, 0xff,
		0x60, 0xa2, 0x97, 0x0b, 0x20, 0x7c, 0xb4, 0x59, 0xa4, 0xff, 0x4f, 0xe6, 0x45, 0xf1, 0xd3, 0xd4,
		0x2e, 0xab, 0xa6, 0x79, 0x8e, 0x5f, 0x24, 0xeb, 0xc4, 0x4e, 0xe9, 0x67, 0xb7, 0xe7, 0x9a, 0x06,
		0x33, 0x43, 0x31, 0xf3, 0x1e, 0x53, 0xee, 0x43, 0x7c, 0xfb, 0x64, 0xd3, 0x79, 0x2e, 0xa9, 0xa3,
		0x8f, 0xec, 0xc9, 0x5e, 0x2a, 0xb7, 0x07, 0x25, 0x95, 0xbd, 0x00, 0x2b, 0x9b, 0xc0, 0xc4, 0xa2,
		0x34, 0x2e, 0x55, 0x49, 0x75, 0x52, 0xb7, 0x35, 0x62, 0xa2, 0x5b, 0xe6, 0x47, 0xd6, 0xd5, 0x6d,
		0x79, 0x55, 0x57, 0xcf, 0xc9, 0x62, 0x2f, 0x49, 0x74, 0xee, 0x61, 0xeb, 0xe2, 0x7a, 0xd1, 0x2c,
		0x2c, 0xdd, 0x8d, 0x96, 0x8d, 0xb8, 0xea, 0x73, 0x29, 0xb8, 0x5a, 0xb2, 0x73, 0x71, 0xe5, 0x18,
		0x8f, 0xf5, 0xcc, 0xf6, 0x33, 0x66, 0x14, 0xdc, 0x0e, 0xe9, 0xcd, 0xe2, 0x3a, 0x86, 0xea, 0xbb,
		0x21, 0xb1, 0x09, 0x0d, 0x8a, 0x1d, 0xb6, 0x6a, 0x8a, 0xeb, 0x10, 0xb2, 0x99, 0x16, 0xfa, 0x3f,
		0x4e, 0xcd, 0xbc, 0x26, 0x27, 0x73, 0x3a, 0x3c, 0xce, 0xe0, 0xec, 0x4c, 0x7d, 0x03, 0xe1, 0x7d,
		0x9d, 0xe4, 0x0e, 0x62, 0x4b, 0x23, 0xc9, 0x73, 0x9a, 0x3b, 0xee, 0xa3, 0xd0, 0xde, 0x0d, 0xd2,
		0xda, 0xf7, 0x6c, 0x4a, 0x1e, 0x41, 0x21, 0x0b, 0x15, 0xed, 0xf4, 0x47, 0x7c, 0x5b, 0x37, 0x32,
		0x9c, 0x19, 0x94, 0x71, 0x78, 0x58, 0x47, 0x78, 0x58, 0xa8, 0xf0, 0xd0, 0x61, 0x8a, 0x53, 0x26,
		0x1c, 0xaa, 0x5c, 0x9f, 0x53, 0x87, 0x7b, 0x8a, 0x19, 0xc4, 0x8a, 0x3a, 0x0b, 0x38, 0xa5, 0x0f,
		0x5c, 0xf4, 0x92, 0x34, 0xce, 0x7e, 0x45, 0x8b, 0x75, 0xc4, 0x8a, 0x0b, 0x32, 0xb9, 0xa8, 0x1f,
		0x5f, 0xa4, 0xa8, 0xa1, 0xc1, 0xa6, 0x05, 0x69, 0xa5, 0x66, 0xd3, 0xf9, 0xd6, 0x78, 0xa6, 0xf1,
		0x8f, 0xfa, 0xf8, 0xc7, 0xa7, 0xe1, 0x8f, 0xbb, 0xb9, 0x1f, 0xe5, 0x66, 0xb3, 0xd2, 0x6c, 0x3a,
		0x3f, 0x9c, 0xfe, 0x58, 0xfe, 0xfb, 0xf7, 0xfb, 0x66, 0xf3, 0x87, 0x66, 0x93, 0xb6, 0xe6, 0xae,
		0xd0, 0xa8, 0xf5, 0xca, 0x03, 0x77, 0xfc, 0x81, 0x17, 0xea, 0x03, 0x4e, 0x72, 0x75, 0xc6, 0xed,
		0xf0, 0xf2, 0x46, 0x1a, 0xaa, 0xf1, 0xd0, 0x07, 0x0e, 0x37, 0xc3, 0x57, 0xdc, 0x97, 0x96, 0x78,
		0xa1, 0x62, 0xca, 0x0d, 0x95, 0xdb, 0xb1, 0xe8, 0x8a, 0x37, 0x33, 0x36, 0xe7, 0xc6, 0x78, 0xf5,
		0x6d, 0x37, 0xc6, 0xd3, 0x54, 0xc3, 0x2c, 0x13, 0x38, 0xfb, 0xd6, 0x1a, 0x4f, 0x4f, 0x4d, 0x73,
		0x89, 0x35, 0xcd, 0x9b, 0xe3, 0xb9, 0x82, 0x3a, 0x6e, 0xd8, 0x61, 0xd2, 0xe1, 0x0e, 0x1d, 0xb0,
		0xce, 0x17, 0xae, 0x52, 0xec, 0xea, 0x5b, 0x3a, 0xdb, 0xb1, 0x95, 0x8b, 0x18, 0x9a, 0x40, 0x16,
		0xe1, 0x30, 0x39, 0xb0, 0x5d, 0x7e, 0x66, 0x26, 0x62, 0x1e, 0x03, 0x93, 0x9d, 0xec, 0xf3, 0xfb,
		0x07, 0x97, 0x01, 0x6d, 0xb3, 0x90, 0x3b, 0xb4, 0x13, 0x44, 0x42, 0x71, 0x79, 0xd5, 0x48, 0xb1,
		0xd1, 0xcf, 0xa6, 0xd9, 0xc0, 0xf4, 0xb4, 0x8a, 0x52, 0xd5, 0x32, 0x15, 0x32, 0x9d, 0xc2, 0x32,
		0x13, 0x62, 0xb6, 0x9c, 0x66, 0x1f, 0x30, 0x65, 0x12, 0x40, 0xad, 0x0c, 0x1e, 0xaa, 0x29, 0xb7,
		0xf0, 0xa7, 0x8d, 0x25, 0xb2, 0x8b, 0x2d, 0x52, 0x1a, 0x46, 0xea, 0x78, 0x6c, 0xa5, 0x88, 0x6b,
		0x37, 0x8d, 0xc6, 0xd5, 0x75, 0xa3, 0x51, 0xbd, 0xbe, 0xb8, 0xae, 0xde, 0x5e, 0x5e, 0xd6, 0xae,
		0x6a, 0x97, 0xc5, 0x95, 0xfa, 0x31, 0xb5, 0x2b, 0x12, 0x74, 0x98, 0x94, 0xcd, 0x82, 0x50, 0xcc,
		0xcf, 0x04, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x71,
		0x24, 0x64, 0xa2, 0x1b, 0xc8, 0xc7, 0x61, 0x4e, 0x21, 0xe8, 0xa8, 0xb4, 0x7c, 0x62, 0x61, 0x32,
		0x50, 0x0a, 0x50, 0x0a, 0x50, 0x0a, 0x50, 0x0a, 0x50, 0x0a, 0x50, 0x0a, 0x50, 0x8a, 0xa3, 0xa3,
		0x14, 0x59, 0xe4, 0x28, 0x16, 0x67, 0x03, 0xa9, 0x00, 0xa9, 0x00, 0xa9, 0x00, 0xa9, 0x00, 0xa9,
		0x00, 0xa9, 0x00, 0xa9, 0x38, 0x06, 0x52, 0x31, 0xdc, 0xa6, 0xec, 0x71, 0x26, 0x53, 0x6c, 0xb3,
		0x9f, 0xce, 0x01, 0x02, 0x01, 0x02, 0x71, 0x14, 0x04, 0xc2, 0x6e, 0xcf, 0xf6, 0x2a, 0x03, 0xb0,
		0x3a, 0xa2, 0xc1, 0x70, 0x4f, 0xf7, 0xbe, 0xa2, 0x77, 0x1d, 0xf0, 0x9d, 0x3b, 0x7c, 0x9b, 0xee,
		0x29, 0x07, 0x58, 0x2f, 0x82, 0xf5, 0x2e, 0x0e, 0x51, 0xd9, 0xee, 0x1e, 0xf6, 0x7d, 0xe4, 0x27,
		0x41, 0xa4, 0xb2, 0xda, 0x95, 0xb1, 0x38, 0x15, 0xd8, 0x0a, 0xd8, 0x0a, 0xd2, 0x1d, 0x48, 0x77,
		0x20, 0xdd, 0x01, 0xbe, 0x84, 0x74, 0xc7, 0x31, 0xa4, 0x3b, 0x62, 0x0e, 0x90, 0xdd, 0xbe, 0x8c,
		0xa5, 0xb3, 0x81, 0x54, 0x80, 0x54, 0x80, 0x54, 0x80, 0x54, 0x80, 0x54, 0x80, 0x54, 0x80, 0x54,
		0x1c, 0x1f, 0xa9, 0xc8, 0x24, 0x4f, 0x81, 0xad, 0x19, 0xa0, 0x15, 0xa0, 0x15, 0xa0, 0x15, 0xa0,
		0x15, 0xa0, 0x15, 0xa0, 0x15, 0x05, 0xa2, 0x15, 0x87, 0x7e, 0x62, 0x4a, 0x8c, 0x39, 0xe7, 0xc6,
		0x9d, 0x60, 0x48, 0x9a, 0x5e, 0xef, 0x1f, 0x07, 0x5e, 0xf8, 0xf9, 0xcf, 0xe9, 0x2d, 0x0f, 0xf6,
		0xdc, 0x94, 0xed, 0xb5, 0x27, 0x4e, 0x9a, 0xf1, 0x76, 0xa3, 0xf8, 0x56, 0xb4, 0x5e, 0xa3, 0x57,
		0xf4, 0xe2, 0x78, 0xdb, 0x13, 0x2f, 0x91, 0xc5, 0x71, 0xb6, 0x27, 0x3e, 0xa4, 0x53, 0x75, 0x62,
		0x37, 0x43, 0xdc, 0x70, 0xb1, 0x95, 0x2e, 0x0e, 0xd3, 0x31, 0x36, 0x82, 0x2c, 0x64, 0x79, 0xd8,
		0x5d, 0x5f, 0xf7, 0xe7, 0x5c, 0x14, 0xdd, 0x7e, 0x77, 0x69, 0xb0, 0xb2, 0x94, 0x53, 0x2b, 0x42,
		0xb3, 0x93, 0x51, 0x26, 0x23, 0x70, 0x36, 0x0a, 0x9a, 0xdf, 0xae, 0x91, 0xfd, 0x31, 0x9d, 0x8d,
		0x52, 0xbf, 0x69, 0xa0, 0xdf, 0xed, 0x4b, 0xa9, 0xdc, 0x36, 0x6e, 0xaf, 0x70, 0x36, 0x4a, 0x81,
		0x82, 0x8f, 0x99, 0xf3, 0x40, 0x10, 0x82, 0xac, 0x97, 0xc8, 0x51, 0x06, 0x22, 0x2b, 0x4e, 0xe1,
		0x5f, 0x76, 0xee, 0xc9, 0xf8, 0x88, 0x7d, 0x83, 0x93, 0x52, 0x02, 0x93, 0xab, 0x87, 0x87, 0xfd,
		0xef, 0x28, 0xbe, 0xc1, 0xd1, 0x2a, 0x86, 0x41, 0xcc, 0x31, 0x1f, 0xae, 0x32, 0x17, 0xa2, 0x2f,
		0x3d, 0x5e, 0x65, 0x49, 0x28, 0x3f, 0x77, 0xdd, 0xde, 0xc4, 0xf5, 0x93, 0xcf, 0xb8, 0xf2, 0x90,
		0x91, 0xd8, 0x80, 0x93, 0xbf, 0x2f, 0x3c, 0x33, 0xec, 0x61, 0x99, 0x3d, 0xd8, 0x08, 0xf2, 0x08,
		0xcf, 0x71, 0x19, 0x85, 0xd3, 0x9a, 0x01, 0x6c, 0x72, 0x35, 0x4e, 0x6e, 0x41, 0xf0, 0xba, 0x4e,
		0xf6, 0x4a, 0xba, 0xa2, 0x67, 0x74, 0x58, 0x4b, 0x0e, 0x7a, 0x1d, 0x0c, 0xb8, 0xa4, 0x4e, 0xf0,
		0x28, 0xa8, 0xe4, 0x2c, 0xd4, 0xc8, 0x62, 0x4d, 0xb7, 0x9a, 0xbc, 0x1c, 0x09, 0x7d, 0x87, 0xbe,
		0xaf, 0x93, 0x7d, 0xd4, 0x76, 0xbb, 0xd4, 0x50, 0x6b, 0xe6, 0xf4, 0x5f, 0x23, 0x01, 0x52, 0x7a,
		0x27, 0x22, 0x3f, 0x7e, 0xae, 0x74, 0x6f, 0xf7, 0xee, 0x29, 0x49, 0x0d, 0x6c, 0x0e, 0x63, 0xcc,
		0xf5, 0x62, 0xfa, 0x91, 0xf8, 0x93, 0xba, 0x0b, 0xfb, 0xc1, 0x23, 0x75, 0xfd, 0x98, 0x91, 0x32,
		0xfd, 0x13, 0xcb, 0xb3, 0x51, 0x97, 0xbe, 0xdb, 0xeb, 0xa7, 0x55, 0x93, 0x96, 0xbd, 0xd3, 0x09,
		0x15, 0x53, 0xdc, 0xd0, 0xdd, 0x0c, 0xc7, 0xc0, 0xd1, 0xc0, 0xd1, 0xac, 0x91, 0x3d, 0x17, 0x91,
		0xcf, 0xe5, 0x70, 0x4d, 0x06, 0xde, 0xe5, 0xf8, 0xbc, 0x8b, 0xc1, 0x39, 0x45, 0xe6, 0xe7, 0x13,
		0xed, 0xdf, 0x31, 0x58, 0xee, 0xa0, 0xe0, 0x87, 0x60, 0xb9, 0x83, 0xbd, 0x39, 0x02, 0x2b, 0xd5,
		0xd9, 0x41, 0x59, 0x9c, 0x19, 0x64, 0xb8, 0x37, 0xdb, 0x78, 0x4f, 0x76, 0x76, 0xc7, 0x62, 0x69,
		0xa9, 0x65, 0x96, 0x39, 0xfb, 0x7d, 0x3b, 0x14, 0x4b, 0x47, 0x6d, 0x73, 0xc9, 0x10, 0x9a, 0xef,
		0xa3, 0xce, 0x6a, 0xff, 0xb4, 0xc5, 0xbe, 0x69, 0xdb, 0xfd, 0xd2, 0x69, 0xf6, 0x49, 0x5b, 0xee,
		0x8f, 0xb6, 0x48, 0x03, 0xa6, 0xd9, 0x0f, 0x9d, 0x76, 0x1f, 0x74, 0x66, 0x3b, 0x71, 0xd3, 0xef,
		0xc0, 0xb5, 0xd8, 0xef, 0x9c, 0x6a, 0x9f, 0x73, 0x0e, 0xfb, 0x9b, 0xf7, 0x49, 0x9a, 0x39, 0xa5,
		0x5f, 0x5b, 0x59, 0x6d, 0x8e, 0x3d, 0xd3, 0x02, 0x52, 0xbb, 0xce, 0x2c, 0x69, 0xcf, 0xc9, 0x01,
		0x80, 0x02, 0x40, 0x01, 0xa0, 0x00, 0x50, 0x00, 0x28, 0x00, 0x74, 0x47, 0x00, 0xaa, 0xe9, 0x84,
		0x2c, 0x36, 0x6a, 0x4d, 0xe1, 0xd5, 0x7c, 0xc3, 0x56, 0x0a, 0x23, 0x5d, 0xa8, 0x1e, 0xf9, 0x1f,
		0x2e, 0xdd, 0x4e, 0x3f, 0xa8, 0xef, 0xb8, 0x06, 0xd7, 0x7a, 0x17, 0x57, 0x66, 0xe0, 0xb6, 0x12,
		0xe4, 0xe6, 0xc5, 0x74, 0xac, 0x14, 0xd0, 0xba, 0x9b, 0x4e, 0x06, 0xa7, 0x1b, 0x81, 0x08, 0x82,
		0x08, 0x82, 0x08, 0x82, 0x08, 0x82, 0x08, 0x82, 0x08, 0x16, 0x06, 0x46, 0xd3, 0x64, 0x53, 0x6c,
		0xdb, 0xc6, 0x00, 0x48, 0x01, 0xa4, 0x00, 0x52, 0x00, 0x29, 0x80, 0x14, 0x40, 0x7a, 0xe0, 0x40,
		0xea, 0x33, 0xd5, 0xe9, 0x73, 0x87, 0x4a, 0x96, 0x0a, 0x49, 0x97, 0x4c, 0x03, 0x28, 0x05, 0x94,
		0x02, 0x4a, 0x01, 0xa5, 0x80, 0x52, 0x40, 0xe9, 0x51, 0x40, 0x69, 0x8a, 0x84, 0x2e, 0xd2, 0xb8,
		0x80, 0x4c, 0x40, 0x26, 0x20, 0x13, 0x90, 0x09, 0xc8, 0x3c, 0x26, 0xc8, 0x4c, 0x13, 0x72, 0x22,
		0xce, 0x04, 0x68, 0x02, 0x34, 0x01, 0x9a, 0x00, 0x4d, 0x80, 0xe6, 0x51, 0x81, 0xa6, 0xe2, 0xd2,
		0x77, 0x05, 0x53, 0xe9, 0xf6, 0x10, 0x2d, 0xce, 0x02, 0x20, 0x05, 0x90, 0x02, 0x48, 0x01, 0xa4,
		0x00, 0x52, 0x00, 0xe9, 0x5e, 0x03, 0x29, 0x76, 0x93, 0xe7, 0x00, 0x64, 0xcb, 0x00, 0x0d, 0xbb,
		0xc9, 0x0f, 0x87, 0x0a, 0xa6, 0x49, 0xa5, 0x2c, 0x99, 0x06, 0x64, 0x10, 0x64, 0x10, 0x64, 0x10,
		0x64, 0x10, 0x64, 0x10, 0x64, 0x10, 0x64, 0x10, 0x64, 0x10, 0x64, 0x70, 0xbf, 0xc9, 0xa0, 0xc7,
		0x42, 0x45, 0x3b, 0x1e, 0x67, 0xd2, 0x9c, 0x01, 0xce, 0x8c, 0x05, 0xed, 0x03, 0xed, 0xdb, 0x39,
		0xed, 0x73, 0x98, 0xe2, 0x94, 0x09, 0x87, 0x2a, 0xd7, 0xe7, 0xd4, 0xe1, 0x9e, 0x62, 0x16, 0xac,
		0xaf, 0x66, 0x42, 0xfb, 0x3e, 0x70, 0xd1, 0x4b, 0xce, 0xa7, 0x3a, 0x0c, 0x0e, 0x56, 0x07, 0x09,
		0xb3, 0x96, 0xdd, 0x45, 0x1d, 0x94, 0x6b, 0x15, 0x60, 0x19, 0x58, 0xcc, 0xef, 0x4c, 0x29, 0x2e,
		0x85, 0xb1, 0xc9, 0x94, 0x9a, 0x4d, 0xe7, 0x5b, 0xe3, 0x99, 0xc6, 0x3f, 0xea, 0xe3, 0x1f, 0x9f,
		0x86, 0x3f, 0xee, 0xe6, 0x7e, 0x94, 0x9b, 0xcd, 0x4a, 0xb3, 0xe9, 0xfc, 0x70, 0xfa, 0x63, 0xf9,
		0xef, 0xdf, 0xef, 0x9b, 0xcd, 0x1f, 0x9a, 0x4d, 0xda, 0x9a, 0xbb, 0xe2, 0xb4, 0xb4, 0x97, 0x58,
		0x1c, 0x44, 0x2a, 0x8b, 0x9e, 0x89, 0xcb, 0xa7, 0x01, 0x42, 0x03, 0xa1, 0x91, 0x98, 0x41, 0x62,
		0x06, 0x89, 0x19, 0x24, 0x66, 0x8a, 0x1f, 0xd6, 0xc6, 0x18, 0x98, 0xb2, 0x6b, 0xe2, 0xe2, 0x14,
		0x80, 0x50, 0x40, 0x28, 0x20, 0x14, 0x10, 0x0a, 0x08, 0x05, 0x84, 0xee, 0x35, 0x84, 0x62, 0x6d,
		0x23, 0x07, 0x20, 0x5b, 0x06, 0x68, 0x58, 0xdb, 0xd8, 0x77, 0x12, 0x98, 0xbe, 0x6f, 0xe2, 0xd2,
		0x59, 0x40, 0x05, 0x41, 0x05, 0x41, 0x05, 0x41, 0x05, 0x41, 0x05, 0x41, 0x05, 0x8f, 0x0d, 0x48,
		0x53, 0x65, 0x54, 0xd0, 0x3a, 0x11, 0x50, 0x0a, 0x28, 0x05, 0x94, 0x02, 0x4a, 0x01, 0xa5, 0xc7,
		0x0a, 0xa5, 0x69, 0x22, 0x51, 0xc4, 0x9f, 0x00, 0x4d, 0x80, 0x26, 0x40, 0x13, 0xa0, 0x09, 0xd0,
		0x3c, 0x2e, 0xd0, 0x94, 0x6e, 0x2f, 0x65, 0xf7, 0x8a, 0xe5, 0xd3, 0x00, 0x4a, 0x01, 0xa5, 0x80,
		0x52, 0x40, 0x29, 0xa0, 0x14, 0x50, 0x7a, 0x74, 0x50, 0x9a, 0x2a, 0x97, 0xbb, 0x64, 0x1e, 0x80,
		0x29, 0xc0, 0x14, 0x60, 0x0a, 0x30, 0x05, 0x98, 0x02, 0x4c, 0x8f, 0x03, 0x4c, 0x53, 0x21, 0x28,
		0x60, 0x13, 0xb0, 0x09, 0xd8, 0x04, 0x6c, 0x02, 0x36, 0x01, 0x9b, 0x05, 0x81, 0xcd, 0x57, 0x29,
		0x74, 0xa1, 0xf4, 0x46, 0x88, 0x40, 0xb1, 0x58, 0xd2, 0x5a, 0x9f, 0xbf, 0x14, 0x76, 0xfa, 0xdc,
		0x67, 0x03, 0x96, 0xb4, 0x60, 0x28, 0x9d, 0xcf, 0xb8, 0xe0, 0xd8, 0x7d, 0x75, 0x59, 0x87, 0x87,
		0xe7, 0x93, 0x3f, 0x9e, 0x87, 0x51, 0x7b, 0xe6, 0x2f, 0xf1, 0x7d, 0x42, 0xe5, 0x76, 0x74, 0xd0,
		0xb7, 0x14, 0x2a, 0x19, 0x75, 0x94, 0x18, 0x79, 0xca, 0x3f, 0xa5, 0xf7, 0x6b, 0x7c, 0x9b, 0xf7,
		0x93, 0xbb, 0x7c, 0x9e, 0xfc, 0xf1, 0xf3, 0x9f, 0x33, 0x77, 0xf9, 0xfc, 0xe7, 0xf4, 0x2e, 0xaf,
		0xec, 0xc4, 0xb6, 0x46, 0x64, 0x25, 0xa5, 0xe3, 0xeb, 0x27, 0xfe, 0x3d, 0xb9, 0x7a, 0xc3, 0x07,
		0xd0, 0x63, 0x18, 0xda, 0xcc, 0xc2, 0x84, 0x51, 0x2c, 0x65, 0x12, 0x3a, 0xdf, 0xc6, 0x90, 0x3e,
		0x58, 0xd3, 0x06, 0x6b, 0xba, 0xb0, 0x92, 0x26, 0x94, 0x72, 0x36, 0x27, 0x6d, 0x2e, 0x30, 0x6d,
		0xea, 0xe8, 0x70, 0xa1, 0x5c, 0xf5, 0x55, 0x72, 0x2d, 0xd1, 0x8f, 0x5b, 0xa6, 0x68, 0xf8, 0xd5,
		0xd2, 0xfb, 0xd1, 0xd4, 0x6f, 0x59, 0xc8, 0xcd, 0xd9, 0x72, 0xe8, 0x52, 0x0d, 0xfd, 0x9d, 0xc7,
		0x80, 0xd0, 0x08, 0xe5, 0x0d, 0xc9, 0xe7, 0xf8, 0xc1, 0xda, 0xd2, 0x75, 0x7a, 0xdc, 0x31, 0xa0,
		0x7b, 0x67, 0x79, 0x3f, 0x92, 0x0c, 0x22, 0xb5, 0x5f, 0x4f, 0xe4, 0x05, 0x1d, 0xe6, 0x51, 0xdf,
		0x4d, 0xca, 0x69, 0x1d, 0x1e, 0xaa, 0xac, 0xd9, 0x71, 0x2b, 0x67, 0x4b, 0xb2, 0x28, 0x95, 0x2a,
		0xf9, 0x51, 0xa8, 0xb4, 0x35, 0xd0, 0x82, 0xaf, 0x8b, 0x40, 0x91, 0x72, 0xa8, 0x98, 0x54, 0x21,
		0x7d, 0x74, 0x55, 0xbf, 0x5c, 0xa9, 0x9c, 0x57, 0x2a, 0xb3, 0x20, 0xd8, 0xbd, 0x8b, 0x11, 0xeb,
		0x8c, 0x9c, 0x84, 0x5f, 0x43, 0xc5, 0xfd, 0x93, 0x53, 0x12, 0x48, 0xa2, 0x37, 0xc2, 0x0b, 0x4c,
		0xae, 0x76, 0x65, 0xdb, 0xe4, 0x72, 0xbf, 0xe7, 0xab, 0x93, 0xd3, 0x53, 0x13, 0xc6, 0xff, 0x2e,
		0x56, 0x9d, 0x8f, 0x3c, 0x0c, 0x59, 0xcf, 0x22, 0x52, 0x9c, 0x85, 0x40, 0x12, 0xcb, 0x2d, 0x8c,
		0x06, 0x83, 0x40, 0x2a, 0xee, 0x90, 0x40, 0x10, 0xd5, 0x77, 0x43, 0x32, 0xc1, 0x6c, 0xd3, 0x20,
		0x32, 0x45, 0x39, 0xd9, 0x2c, 0x14, 0x0d, 0x4b, 0xcd, 0xfd, 0xd1, 0x1b, 0x5a, 0x70, 0xe6, 0x2c,
		0x2a, 0xc9, 0xe6, 0x90, 0x4a, 0x4b, 0x58, 0x39, 0xd1, 0xd1, 0xe7, 0x8c, 0xe8, 0x68, 0xcb, 0x96,
		0x75, 0xbd, 0x32, 0xf0, 0x12, 0xf1, 0x67, 0x1c, 0x76, 0x44, 0x76, 0xf8, 0x2a, 0x32, 0x51, 0xfa,
		0xe0, 0x86, 0xea, 0x8d, 0x52, 0xeb, 0xdb, 0xec, 0xc5, 0x31, 0xe3, 0x3b, 0x8f, 0xc7, 0x5f, 0x60,
		0x43, 0x94, 0x11, 0x87, 0x48, 0x33, 0x57, 0x36, 0xaa, 0xb7, 0x6b, 0x30, 0xb8, 0xf4, 0x9b, 0x74,
		0xb8, 0xe4, 0xce, 0xdb, 0xf8, 0x31, 0x45, 0xe4, 0x79, 0x46, 0x6f, 0xa7, 0x49, 0xca, 0x53, 0x90,
		0xf1, 0x35, 0xea, 0x6e, 0xcb, 0xbc, 0x97, 0x2b, 0xe6, 0xe2, 0x67, 0x5d, 0xf2, 0xd2, 0x25, 0x25,
		0x59, 0xb7, 0xeb, 0x76, 0xa8, 0x64, 0x6a, 0xb5, 0x5d, 0x4f, 0x7d, 0xca, 0xec, 0xd5, 0xab, 0x14,
		0x64, 0xc4, 0x93, 0x56, 0xfc, 0x7a, 0x42, 0xa7, 0x57, 0xb4, 0x18, 0xd3, 0xa1, 0xd1, 0xa6, 0xf4,
		0x59, 0xd7, 0x6f, 0x19, 0xd3, 0x65, 0x63, 0x47, 0x64, 0x41, 0x8f, 0xcd, 0xcc, 0xf3, 0x67, 0x77,
		0x83, 0xd5, 0xb9, 0x82, 0xb6, 0x07, 0xa1, 0x7e, 0x24, 0x35, 0xba, 0x1e, 0xb1, 0x14, 0x62, 0xa9,
		0x35, 0xb2, 0x8f, 0x5c, 0xa1, 0xb4, 0x32, 0xa8, 0x06, 0x99, 0x53, 0xc3, 0xec, 0xa5, 0x01, 0xab,
		0xb4, 0xc9, 0x56, 0xda, 0x66, 0x29, 0x53, 0xe7, 0xd3, 0xec, 0xf3, 0x68, 0x06, 0xb1, 0x8e, 0x55,
		0x16, 0x32, 0xc3, 0xec, 0xe3, 0x2e, 0xa5, 0xb4, 0x6b, 0xfa, 0xb5, 0x06, 0xb7, 0x82, 0x48, 0x99,
		0x79, 0xeb, 0xf1, 0x00, 0xb8, 0x6b, 0xb8, 0x6b, 0xb8, 0x6b, 0xb8, 0x6b, 0xb8, 0xeb, 0xdd, 0x46,
		0xcb, 0xf9, 0xc4, 0x93, 0x1a, 0x61, 0x98, 0x69, 0x3c, 0xf9, 0x69, 0x38, 0xe5, 0x1f, 0xf1, 0x8c,
		0xe9, 0xc2, 0x49, 0x11, 0x76, 0xb8, 0xfb, 0xc0, 0xa5, 0x56, 0x34, 0x39, 0xb9, 0x38, 0x65, 0x30,
		0x59, 0x45, 0x30, 0xb9, 0x8b, 0x60, 0xb2, 0xd3, 0x67, 0x42, 0x70, 0x4f, 0x9f, 0x9f, 0x8c, 0x07,
		0xe8, 0xf1, 0x93, 0x9a, 0x2e, 0x3f, 0xa9, 0x83, 0x9f, 0xec, 0x31, 0x3f, 0xd9, 0xa4, 0x46, 0x33,
		0xb9, 0x09, 0x87, 0x3f, 0xd9, 0x9c, 0xce, 0xb6, 0x3a, 0x17, 0x69, 0x49, 0x7d, 0x8d, 0x29, 0xb0,
		0x8d, 0xaa, 0xa5, 0x55, 0xb9, 0xb4, 0x69, 0xf9, 0x3d, 0xde, 0x54, 0x76, 0x78, 0x3b, 0xca, 0x62,
		0x4a, 0x7d, 0x63, 0xb1, 0x85, 0xec, 0xb2, 0xb0, 0xdb, 0xb9, 0x6a, 0xd8, 0xce, 0x65, 0x2d, 0xba,
		0x2a, 0x36, 0x6f, 0x59, 0xf1, 0x76, 0xfd, 0xf9, 0xf4, 0x4e, 0x0f, 0x1d, 0x44, 0x8a, 0x0e, 0x82,
		0x47, 0x2e, 0x6d, 0x50, 0x69, 0x3a, 0xd8, 0x0c, 0x9b, 0x6a, 0xa6, 0xd8, 0x54, 0x07, 0x36, 0x1d,
		0x01, 0x36, 0xe9, 0xd2, 0xa8, 0xc9, 0x80, 0xbe, 0xdb, 0xeb, 0x53, 0xe6, 0x31, 0xe9, 0xd3, 0x4e,
		0x20, 0x1c, 0x57, 0x7b, 0xaf, 0xe1, 0x52, 0x05, 0x58, 0x3a, 0x9b, 0xa1, 0x48, 0xcd, 0xc8, 0x97,
		0x35, 0x09, 0x4b, 0xa3, 0xf0, 0x59, 0x29, 0x7e, 0x5a, 0x03, 0xc8, 0xcc, 0x10, 0x32, 0x33, 0x88,
		0x0c, 0x0d, 0xc3, 0x12, 0x24, 0x0c, 0xbf, 0xbe, 0x31, 0x99, 0x5b, 0xf8, 0xf6, 0xed, 0x20, 0xf0,
		0x38, 0x13, 0x36, 0x9f, 0x7d, 0xec, 0xcb, 0x6b, 0x79, 0xed, 0x1a, 0x39, 0xb3, 0x72, 0x04, 0xaa,
		0x2f, 0x79, 0xd8, 0x0f, 0x3c, 0x27, 0x13, 0x47, 0x30, 0x9d, 0x0d, 0x8e, 0x00, 0x8e, 0xa0, 0xc0,
		0x8e, 0xc0, 0xe1, 0x1d, 0xd7, 0x67, 0x9e, 0x51, 0x91, 0xd0, 0x82, 0x2b, 0xb0, 0x38, 0x54, 0x6f,
		0x91, 0xd0, 0xdb, 0x4c, 0x62, 0x17, 0x37, 0xda, 0xc7, 0x8f, 0x99, 0xc4, 0x91, 0x0b, 0x41, 0xd1,
		0x6d, 0xbd, 0x7e, 0x71, 0x71, 0x5d, 0xaf, 0x5e, 0x5c, 0xdd, 0x5c, 0x36, 0xae, 0xaf, 0x2f, 0x6f,
		0xaa, 0x37, 0x67, 0xe9, 0x66, 0xce, 0x42, 0xb8, 0xab, 0xa2, 0xa6, 0xd8, 0xac, 0xac, 0x27, 0x7b,
		0x3e, 0x4b, 0x21, 0xf3, 0x14, 0x01, 0xa8, 0x86, 0xcc, 0xaf, 0xf7, 0x58, 0xe6, 0x76, 0x91, 0xaa,
		0x9d, 0x0f, 0xb2, 0x1f, 0xd5, 0xda, 0x17, 0x46, 0xf0, 0xc8, 0xa4, 0x70, 0x45, 0x2f, 0xb3, 0xe0,
		0x60, 0x71, 0x3e, 0xb0, 0x02, 0xb0, 0x02, 0x84, 0x07, 0x07, 0x11, 0x1e, 0x8c, 0x8d, 0x37, 0xab,
		0x00, 0x61, 0x71, 0x3e, 0x38, 0x03, 0x38, 0x03, 0x84, 0x08, 0x08, 0x11, 0x10, 0x22, 0x20, 0x44,
		0x40, 0x88, 0xb0, 0xf7, 0x21, 0x82, 0xc7, 0x14, 0x0f, 0x15, 0x7d, 0x18, 0x7d, 0x66, 0xdb, 0x6a,
		0xd8, 0xd9, 0x59, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
		0x00, 0xf6, 0x9f, 0x01, 0x04, 0x8f, 0xd9, 0x6d, 0x1f, 0x58, 0x36, 0x19, 0xf8, 0x00, 0xf8, 0x00,
		0xd2, 0x83, 0xfb, 0x9e, 0x1e, 0x9c, 0x5a, 0x6e, 0x06, 0xb9, 0xc1, 0x65, 0x93, 0xc1, 0x0d, 0xc0,
		0x0d, 0x20, 0x2c, 0x40, 0x58, 0x80, 0xb0, 0x00, 0x61, 0x01, 0xc2, 0x82, 0x83, 0x08, 0x0b, 0x32,
		0xdc, 0x3a, 0xb0, 0x7c, 0x3a, 0x70, 0x02, 0x70, 0x02, 0x84, 0x06, 0x87, 0x10, 0x1a, 0x64, 0xb8,
		0x71, 0x60, 0xf9, 0x74, 0x70, 0x05, 0x70, 0x05, 0x08, 0x0f, 0x10, 0x1e, 0x20, 0x3c, 0x40, 0x78,
		0x80, 0xf0, 0x60, 0x37, 0xe1, 0x41, 0xa6, 0x85, 0x8c, 0x86, 0x27, 0x1f, 0x4c, 0xc6, 0x19, 0x37,
		0xc9, 0x19, 0x77, 0x97, 0x39, 0x1f, 0xb5, 0x1d, 0x39, 0x37, 0xaf, 0xc9, 0x25, 0xe6, 0x7d, 0x74,
		0xc6, 0x77, 0xfd, 0xfc, 0xd3, 0xf0, 0xae, 0x9f, 0xdf, 0xc7, 0x77, 0xfd, 0x3d, 0xb9, 0xe9, 0x16,
		0x8b, 0x97, 0x3d, 0x16, 0x72, 0x49, 0xdb, 0x2e, 0x0b, 0x69, 0x27, 0x92, 0x72, 0x88, 0xa5, 0x86,
		0x35, 0xcc, 0x4b, 0xe6, 0x40, 0x29, 0x33, 0x4a, 0x99, 0x53, 0x7b, 0x00, 0x94, 0x32, 0x23, 0xcc,
		0x40, 0x98, 0x81, 0x8c, 0x83, 0x79, 0xc6, 0x01, 0xa5, 0xcc, 0x70, 0x04, 0x70, 0x04, 0xc5, 0xc8,
		0x37, 0x5c, 0x20, 0xdf, 0x90, 0x5f, 0xbe, 0xe1, 0x02, 0xf9, 0x86, 0xad, 0xe7, 0x1b, 0x2e, 0x90,
		0x6f, 0xd8, 0x11, 0x23, 0x40, 0x29, 0x33, 0x58, 0x01, 0x58, 0x01, 0xc2, 0x03, 0x94, 0x32, 0xc3,
		0x19, 0xc0, 0x19, 0x20, 0x44, 0x40, 0x88, 0x80, 0x10, 0x01, 0x21, 0x02, 0x42, 0x84, 0xa1, 0xd0,
		0x50, 0xca, 0x0c, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x70, 0x94,
		0x0c, 0x00, 0xa5, 0xcc, 0xe0, 0x03, 0xe0, 0x03, 0xc7, 0x9e, 0x1e, 0x44, 0x29, 0x33, 0xdc, 0x00,
		0xdc, 0x00, 0xc2, 0x02, 0x84, 0x05, 0x08, 0x0b, 0x10, 0x16, 0x20, 0x2c, 0x40, 0x29, 0x33, 0x38,
		0x01, 0x38, 0x01, 0x42, 0x03, 0x94, 0x32, 0xc3, 0x15, 0xc0, 0x15, 0x20, 0x3c, 0x40, 0x78, 0x80,
		0xf0, 0x00, 0xe1, 0x41, 0xb1, 0xc3, 0x83, 0x82, 0x94, 0x32, 0x5b, 0x97, 0xe6, 0x92, 0x0c, 0x2a,
		0x9a, 0x3f, 0xc4, 0x37, 0x7f, 0xeb, 0xb2, 0xf0, 0xa7, 0xd1, 0xad, 0xb7, 0x58, 0xd7, 0x1c, 0x44,
		0x2a, 0xc5, 0xa9, 0xcc, 0x73, 0xa3, 0x51, 0xcb, 0x8c, 0x5a, 0xe6, 0xd4, 0x2e, 0x00, 0xb5, 0xcc,
		0x88, 0x33, 0x10, 0x67, 0x20, 0xe5, 0x60, 0x9e, 0x72, 0x40, 0x2d, 0x33, 0x1c, 0x01, 0x1c, 0x01,
		0x7a, 0xa7, 0x21, 0xe1, 0x90, 0xbd, 0x70, 0x91, 0x70, 0xd8, 0x1f, 0x99, 0x63, 0x3d, 0xd2, 0x88,
		0x11, 0xa0, 0x96, 0x19, 0xac, 0x00, 0xac, 0x00, 0xe1, 0x01, 0x6a, 0x99, 0xe1, 0x0c, 0xe0, 0x0c,
		0x10, 0x22, 0x20, 0x44, 0x40, 0x88, 0x80, 0x10, 0x01, 0x21, 0xc2, 0x50, 0x68, 0xa8, 0x65, 0x06,
		0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x38, 0x4a, 0x06, 0x80, 0x5a,
		0x66, 0xf0, 0x01, 0xf0, 0x81, 0x63, 0x4f, 0x0f, 0xa2, 0x96, 0x19, 0x6e, 0x00, 0x6e, 0x00, 0x61,
		0x01, 0xc2, 0x02, 0x84, 0x05, 0x08, 0x0b, 0x10, 0x16, 0xa0, 0x96, 0x19, 0x9c, 0x00, 0x9c, 0x00,
		0xa1, 0x01, 0x6a, 0x99, 0xe1, 0x0a, 0xe0, 0x0a, 0x10, 0x1e, 0x20, 0x3c, 0x40, 0x78, 0x80, 0xf0,
		0xa0, 0xd8, 0xe1, 0x41, 0x41, 0x6a, 0x99, 0x2d, 0x8a, 0x72, 0x49, 0x06, 0x55, 0xcc, 0xbf, 0x25,
		0xb7, 0xdd, 0xfa, 0xc1, 0xcc, 0x8f, 0xec, 0x81, 0x7b, 0x5c, 0xf4, 0x12, 0x79, 0x19, 0x96, 0x2f,
		0xcf, 0x8c, 0x35, 0x2b, 0x5e, 0xae, 0xa2, 0x78, 0x19, 0xc5, 0xcb, 0x19, 0xf0, 0xa4, 0x54, 0xfc,
		0xc8, 0x86, 0x17, 0xa5, 0x82, 0x0f, 0x4b, 0x1e, 0x64, 0x41, 0x1b, 0xd3, 0xf0, 0x9e, 0xec, 0xf9,
		0x4e, 0x66, 0x98, 0x9b, 0x9a, 0xdf, 0x58, 0xf0, 0x9a, 0x54, 0x7c, 0x26, 0x7b, 0x1e, 0x93, 0x8b,
		0x2c, 0xed, 0x78, 0xcb, 0x73, 0x4e, 0x3c, 0xa2, 0x95, 0x15, 0xfa, 0xbd, 0x4a, 0xa1, 0x0a, 0xb1,
		0x77, 0x8e, 0x1d, 0x8b, 0x2b, 0x1c, 0xbe, 0xc9, 0x31, 0x97, 0x3e, 0xb8, 0xa1, 0x7a, 0xa3, 0x94,
		0x5e, 0xe7, 0x85, 0xd8, 0x38, 0xdf, 0x79, 0x3c, 0xf6, 0xbb, 0xa1, 0x1e, 0x14, 0xc6, 0x2a, 0x38,
		0x33, 0xa2, 0x76, 0xd3, 0x68, 0x5c, 0x5d, 0x37, 0x1a, 0xd5, 0xeb, 0x8b, 0xeb, 0xea, 0xed, 0xe5,
		0x65, 0xed, 0xaa, 0x76, 0xa9, 0x31, 0xc9, 0x6f, 0xd2, 0xe1, 0x92, 0x3b, 0x6f, 0xe3, 0xd7, 0x12,
		0x91, 0xe7, 0xa5, 0x92, 0x8e, 0x21, 0x3b, 0x4b, 0xcf, 0xca, 0x34, 0xfc, 0x7a, 0x4a, 0x02, 0xb6,
		0x1e, 0xf4, 0x56, 0x2b, 0xd3, 0x1a, 0x51, 0x95, 0x3a, 0x81, 0x10, 0xbc, 0xa3, 0x02, 0x49, 0x95,
		0x0e, 0xb4, 0x4d, 0xe0, 0xec, 0xc5, 0xb8, 0x4d, 0xaa, 0xaa, 0x45, 0xaa, 0xb4, 0xc9, 0x94, 0x09,
		0x89, 0xb2, 0x25, 0x4f, 0xa6, 0xa4, 0xc9, 0x9a, 0x2c, 0x59, 0x93, 0xa4, 0x14, 0xe4, 0x28, 0x9d,
		0xe3, 0xd1, 0x26, 0x41, 0x13, 0xd9, 0x73, 0x11, 0xf9, 0x5c, 0x32, 0xcd, 0x25, 0x91, 0x09, 0xed,
		0x69, 0x68, 0x5c, 0xfb, 0x4e, 0x44, 0x7e, 0xfc, 0x30, 0xcf, 0x39, 0x18, 0x87, 0xc3, 0x14, 0xa7,
		0x9d, 0xc0, 0x31, 0xb0, 0x8b, 0xe9, 0x10, 0x98, 0x04, 0x4c, 0x62, 0x9d, 0xec, 0x95, 0x74, 0x45,
		0xcf, 0xc4, 0x1a, 0x6e, 0xf2, 0xd0, 0x70, 0xc7, 0xa7, 0xfc, 0x61, 0x04, 0xdb, 0xba, 0x2a, 0x3e,
		0x1d, 0x93, 0xb1, 0x8e, 0x57, 0xa1, 0xe3, 0x85, 0xd2, 0x71, 0xfd, 0xe5, 0x41, 0xcd, 0xe5, 0xc0,
		0x4d, 0x8f, 0xc8, 0x9f, 0x94, 0x64, 0x34, 0x12, 0xa1, 0x62, 0x6d, 0x4f, 0xf3, 0x61, 0xfd, 0x28,
		0x54, 0xda, 0x11, 0xaf, 0x45, 0xe0, 0x2f, 0x02, 0x55, 0xae, 0x54, 0xce, 0x2b, 0x95, 0xf3, 0xb6,
		0xe4, 0xec, 0x4b, 0x10, 0x29, 0xea, 0x07, 0x0e, 0x3f, 0x35, 0xc9, 0x03, 0xbc, 0x93, 0x32, 0x90,
		0x1f, 0x79, 0x18, 0xb2, 0x5e, 0x8a, 0x22, 0xa6, 0xa9, 0xe1, 0x12, 0x11, 0x28, 0xd2, 0x49, 0xcc,
		0x2e, 0x92, 0xb1, 0xa8, 0xc8, 0x63, 0x9f, 0x0b, 0x32, 0xf7, 0x80, 0xc4, 0x0d, 0x09, 0x17, 0xf1,
		0x2f, 0x8d, 0xd7, 0x2e, 0x53, 0xac, 0xe3, 0xcd, 0xda, 0x13, 0x8f, 0xdf, 0x9a, 0xfa, 0xa3, 0xd7,
		0xb6, 0x08, 0x8c, 0xb3, 0x58, 0xc6, 0x9b, 0x33, 0x37, 0x7b, 0x09, 0xee, 0x36, 0xa3, 0xfd, 0x2a,
		0x5d, 0x44, 0x6b, 0x87, 0x2d, 0x5c, 0xf5, 0xb9, 0x14, 0x5c, 0xd1, 0x81, 0xef, 0xe8, 0xa3, 0xcb,
		0xdc, 0x28, 0x70, 0x28, 0xe0, 0xcb, 0xde, 0x73, 0xa8, 0x2e, 0x8b, 0x3c, 0x65, 0xb0, 0x85, 0x6c,
		0xf2, 0xf8, 0x2f, 0x07, 0x42, 0xdb, 0xa1, 0xed, 0x5b, 0x65, 0x53, 0x76, 0xea, 0x1e, 0x48, 0x9f,
		0x76, 0x59, 0x47, 0x05, 0xd2, 0x40, 0xd5, 0x67, 0x06, 0x41, 0xcd, 0xa1, 0xe6, 0xc5, 0xcb, 0x15,
		0x75, 0x03, 0xf9, 0xc8, 0xa4, 0x43, 0x87, 0xa4, 0xb5, 0x13, 0x48, 0xc9, 0x3b, 0x86, 0x70, 0xb0,
		0x6a, 0x06, 0x44, 0xd9, 0x30, 0x98, 0xbd, 0x36, 0x18, 0x44, 0xe5, 0x29, 0xa2, 0xf2, 0x55, 0x66,
		0x8f, 0x18, 0xdd, 0x2e, 0x46, 0xcf, 0x4a, 0x9e, 0x47, 0x18, 0xb1, 0xbb, 0x42, 0xff, 0xa4, 0x88,
		0x89, 0xfe, 0xce, 0x0e, 0xd2, 0x43, 0xaa, 0x1a, 0xa8, 0x5d, 0x11, 0x90, 0x4a, 0xf7, 0x20, 0x87,
		0x74, 0x07, 0x38, 0x64, 0x71, 0x70, 0x83, 0xf5, 0xa6, 0xbe, 0x2a, 0x36, 0xf5, 0x65, 0xef, 0xb1,
		0x0b, 0xb4, 0xa9, 0xcf, 0xbc, 0xfe, 0xc9, 0xb0, 0xee, 0x29, 0x9b, 0x1d, 0xb4, 0xa9, 0x0e, 0x4e,
		0xc8, 0xe2, 0xc0, 0x04, 0x18, 0x20, 0x0c, 0x30, 0x17, 0x03, 0xc4, 0xae, 0xda, 0xb9, 0x1b, 0x61,
		0x57, 0x6d, 0x2a, 0x45, 0x9c, 0x97, 0x25, 0x76, 0xd5, 0xa6, 0x8d, 0x75, 0xc8, 0x6e, 0x76, 0xd5,
		0xea, 0x22, 0xa2, 0x7d, 0xf5, 0x7f, 0x36, 0x07, 0x06, 0x00, 0x15, 0x81, 0x8a, 0x47, 0x4f, 0x4b,
		0xed, 0xeb, 0xee, 0xb3, 0x69, 0xd4, 0x0f, 0x23, 0x84, 0x11, 0x82, 0x9a, 0x82, 0x9a, 0x82, 0x9a,
		0x82, 0x9a, 0xee, 0x05, 0x35, 0xb5, 0x6a, 0x58, 0x9f, 0xa6, 0x51, 0x3d, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x04, 0x02, 0x02, 0x01, 0x81, 0x80, 0xfb, 0x81, 0x80, 0x29, 0x1a, 0xb6, 0x67, 0xd0, 0xa8,
		0x1d, 0x78, 0x08, 0x3c, 0x3c, 0xe6, 0xb4, 0x4c, 0x9a, 0x46, 0xe9, 0x19, 0x34, 0x48, 0x87, 0xf9,
		0xc1, 0xfc, 0x40, 0x47, 0x41, 0x47, 0x41, 0x47, 0x41, 0x47, 0xf7, 0x86, 0x8e, 0x66, 0xb0, 0x54,
		0x98, 0xa6, 0x41, 0x38, 0x30, 0x11, 0x98, 0x78, 0xec, 0x94, 0x34, 0x83, 0x85, 0xc2, 0x34, 0x8d,
		0xb9, 0x61, 0x82, 0x30, 0x41, 0xd0, 0x52, 0xd0, 0x52, 0xd0, 0x52, 0xd0, 0xd2, 0xfc, 0x69, 0xe9,
		0x81, 0xb4, 0x3e, 0xd4, 0xaf, 0xfd, 0x21, 0x29, 0xda, 0x1f, 0xbe, 0x17, 0x7a, 0x6d, 0xa7, 0xed,
		0x8a, 0x9e, 0x3c, 0x16, 0x72, 0x49, 0xdb, 0x2e, 0x0b, 0x69, 0x27, 0x92, 0x72, 0x88, 0x29, 0x9a,
		0xb5, 0x4f, 0x4b, 0xc6, 0xa2, 0x04, 0x0a, 0x25, 0x50, 0x8b, 0x17, 0xa2, 0x04, 0x0a, 0xf4, 0x15,
		0x11, 0xe4, 0x0e, 0x23, 0x48, 0x94, 0x40, 0xc1, 0x00, 0x11, 0x3f, 0x66, 0x1b, 0x3f, 0x5e, 0x20,
		0x7e, 0xcc, 0x55, 0x68, 0x88, 0x1f, 0xf3, 0x97, 0x25, 0x4a, 0xa0, 0x50, 0x02, 0x05, 0x54, 0x04,
		0x2d, 0x45, 0x09, 0x14, 0x8c, 0x10, 0x46, 0x08, 0x6a, 0x0a, 0x6a, 0x0a, 0x6a, 0x0a, 0x6a, 0xba,
		0x63, 0x6a, 0x8a, 0x12, 0x28, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0xa2, 0x04,
		0x0a, 0x25, 0x50, 0xc0, 0x43, 0xa4, 0x65, 0x50, 0x02, 0x05, 0xf3, 0x83, 0xf9, 0x81, 0x8e, 0x82,
		0x8e, 0x82, 0x8e, 0x82, 0x8e, 0xa2, 0x04, 0x0a, 0x98, 0x08, 0x4c, 0x3c, 0x36, 0x4a, 0x8a, 0x12,
		0x28, 0x98, 0x20, 0x68, 0x29, 0x68, 0x29, 0x68, 0x29, 0x68, 0x29, 0x4a, 0xa0, 0xd6, 0xfa, 0xc6,
		0xad, 0x95, 0x40, 0x19, 0x97, 0x00, 0x91, 0x14, 0x95, 0x50, 0x1f, 0xe2, 0x9b, 0xbd, 0x75, 0x59,
		0xf8, 0xd3, 0xe8, 0x56, 0x39, 0xd4, 0x43, 0x05, 0x03, 0x2e, 0x69, 0xa8, 0x98, 0xe2, 0xfa, 0x75,
		0x50, 0x33, 0x63, 0x70, 0xba, 0x27, 0x0e, 0x2b, 0x5c, 0x23, 0xfb, 0x19, 0xd3, 0xa1, 0xda, 0x5a,
		0x43, 0xf6, 0xe9, 0xa0, 0xcf, 0x20, 0x52, 0x16, 0xa7, 0xa4, 0xcd, 0x8d, 0x42, 0x8d, 0x20, 0x6a,
		0x04, 0x17, 0x2f, 0x44, 0x8d, 0x20, 0xe2, 0x3b, 0xa4, 0x58, 0x76, 0x98, 0x62, 0x41, 0x8d, 0x20,
		0x0c, 0x10, 0x09, 0x96, 0x6c, 0x13, 0x2c, 0xe8, 0x31, 0x93, 0xaf, 0xd0, 0x90, 0x60, 0xc9, 0x5f,
		0x96, 0xa8, 0x11, 0x44, 0x8d, 0x20, 0x50, 0x11, 0xb4, 0x14, 0x35, 0x82, 0x30, 0x42, 0x18, 0x21,
		0xa8, 0x29, 0xa8, 0x29, 0xa8, 0x29, 0xa8, 0xe9, 0x8e, 0xa9, 0x29, 0x6a, 0x04, 0x81, 0x80, 0x40,
		0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x88, 0x1a, 0x41, 0xd4, 0x08, 0x02, 0x0f, 0x91, 0x96, 0x41,
		0x8d, 0x20, 0xcc, 0x0f, 0xe6, 0x07, 0x3a, 0x0a, 0x3a, 0x0a, 0x3a, 0x0a, 0x3a, 0x8a, 0x1a, 0x41,
		0x60, 0x22, 0x30, 0xf1, 0xd8, 0x28, 0x29, 0x6a, 0x04, 0x61, 0x82, 0xa0, 0xa5, 0xa0, 0xa5, 0xa0,
		0xa5, 0xa0, 0xa5, 0xa8, 0x11, 0x5c, 0xeb, 0x1b, 0xb7, 0x56, 0x23, 0x68, 0x50, 0xfc, 0x43, 0x52,
		0x54, 0x07, 0xfe, 0x96, 0xdc, 0x26, 0xb7, 0x83, 0xd2, 0x42, 0x2e, 0x5d, 0xe6, 0x51, 0x11, 0xf9,
		0x6d, 0x93, 0xca, 0xa7, 0xf9, 0x61, 0x28, 0x0f, 0x44, 0x79, 0xe0, 0x3a, 0xd9, 0x2b, 0xe9, 0x8a,
		0x9e, 0x49, 0x39, 0xe0, 0x4d, 0x0e, 0x9a, 0xae, 0xb8, 0x3f, 0xe0, 0x92, 0xa9, 0x48, 0x1a, 0xd4,
		0xc0, 0xce, 0x0e, 0x42, 0x81, 0x1f, 0x0a, 0xfc, 0x16, 0x2f, 0x44, 0x81, 0x1f, 0x82, 0x33, 0xe4,
		0x47, 0x76, 0x98, 0x1f, 0x41, 0x81, 0x1f, 0x0c, 0xb0, 0x98, 0x06, 0xa8, 0x4f, 0x3e, 0x96, 0xa9,
		0xa3, 0x49, 0x86, 0xe3, 0xff, 0x89, 0x61, 0x50, 0x5a, 0xea, 0x70, 0x2f, 0x74, 0xa3, 0xb0, 0x54,
		0xd8, 0xec, 0xc8, 0x45, 0xfd, 0xfa, 0x2a, 0xb3, 0x7c, 0x48, 0xf5, 0xd8, 0xf2, 0x21, 0xb1, 0xf4,
		0xae, 0xf7, 0x48, 0x7a, 0x28, 0xe2, 0x43, 0x11, 0x1f, 0x90, 0x0f, 0xd4, 0x13, 0x45, 0x7c, 0x30,
		0x42, 0x18, 0x21, 0xe8, 0x27, 0xe8, 0x27, 0xe8, 0x27, 0xe8, 0xe7, 0x16, 0x90, 0x0f, 0x85, 0x7a,
		0x40, 0x39, 0xa0, 0x1c, 0x50, 0x0e, 0x28, 0x07, 0x94, 0x2b, 0x30, 0xca, 0xa1, 0x18, 0x0f, 0x98,
		0x87, 0xf4, 0x0a, 0x8a, 0xf1, 0x60, 0x7e, 0x30, 0x3f, 0x50, 0x4e, 0x50, 0x4e, 0x50, 0x4e, 0x50,
		0xce, 0xfc, 0x31, 0x0f, 0x05, 0x77, 0xc0, 0x3d, 0xd0, 0x4e, 0x82, 0x82, 0x3b, 0x98, 0x20, 0x4c,
		0x10, 0xd4, 0x13, 0xd4, 0x13, 0xd4, 0x13, 0xd4, 0x33, 0x25, 0xee, 0x1d, 0x48, 0x51, 0x9d, 0x99,
		0x7f, 0xb2, 0xad, 0xa9, 0xfb, 0x34, 0x73, 0x97, 0x3c, 0x2a, 0x8d, 0x9e, 0x68, 0x72, 0x80, 0xa0,
		0x41, 0x99, 0xd1, 0x78, 0x44, 0xc6, 0x95, 0x74, 0x55, 0xd4, 0x18, 0xe5, 0x0a, 0xef, 0xdb, 0xae,
		0xa4, 0xd3, 0x67, 0xd0, 0x9a, 0xcc, 0x79, 0xd3, 0x23, 0xf2, 0x27, 0x25, 0x19, 0x8d, 0x44, 0xa8,
		0x58, 0xdb, 0xd3, 0x7c, 0x58, 0x3f, 0x0a, 0x95, 0x36, 0x78, 0x5b, 0x70, 0x18, 0x11, 0xa8, 0x72,
		0xa5, 0x72, 0x5e, 0xa9, 0x9c, 0xb7, 0x25, 0x67, 0x5f, 0x82, 0x48, 0x51, 0x3f, 0x70, 0xf8, 0xa9,
		0x09, 0xc3, 0x78, 0x27, 0x65, 0x20, 0x3f, 0xf2, 0x30, 0x64, 0x3d, 0x0b, 0x46, 0xfa, 0xd2, 0x6c,
		0x89, 0x08, 0x14, 0xe9, 0x24, 0x46, 0x17, 0xc9, 0x58, 0x50, 0xe4, 0xb1, 0xcf, 0x05, 0x99, 0x7b,
		0x3c, 0xe2, 0x86, 0x84, 0x8b, 0xf8, 0x97, 0x8e, 0x29, 0x7f, 0xb5, 0x24, 0xce, 0x2f, 0xad, 0x89,
		0xc7, 0xef, 0x4c, 0xfd, 0xd1, 0x4b, 0x5b, 0xe0, 0x7d, 0x5a, 0x1e, 0xbd, 0x60, 0x6c, 0xb6, 0xf2,
		0xcb, 0x09, 0x6c, 0x9f, 0x33, 0x02, 0xdb, 0x56, 0x0e, 0x98, 0xf2, 0xc0, 0x85, 0x13, 0x18, 0x20,
		0xca, 0xe8, 0x7a, 0x54, 0x66, 0x03, 0x4f, 0xd6, 0xc9, 0x7e, 0x2f, 0x2a, 0xb3, 0x87, 0xba, 0x4a,
		0x07, 0x4c, 0x2a, 0xe3, 0x46, 0x04, 0x4b, 0xc6, 0x42, 0xe7, 0xa1, 0xf3, 0x87, 0xa2, 0xf3, 0x92,
		0x3f, 0xb8, 0xa1, 0x4e, 0x5c, 0xf5, 0x52, 0xe1, 0x27, 0x03, 0xa1, 0xed, 0xd0, 0xf6, 0xfd, 0xd7,
		0xf6, 0xc0, 0x53, 0x3a, 0x4c, 0x7b, 0xaa, 0xe5, 0xa3, 0x01, 0xe8, 0xb9, 0x81, 0x9e, 0x1b, 0x8b,
		0x17, 0xa2, 0xe7, 0x46, 0x86, 0x0a, 0x99, 0x36, 0xcc, 0xc4, 0xfa, 0x8c, 0xbd, 0x9b, 0x4e, 0x91,
		0xe0, 0x31, 0x4c, 0xf4, 0x18, 0xa4, 0x8a, 0xd1, 0x73, 0x03, 0x06, 0x88, 0x8e, 0xa4, 0x5b, 0xef,
		0x48, 0xda, 0x40, 0x47, 0xd2, 0x5c, 0x85, 0x36, 0xff, 0xb9, 0xd1, 0x91, 0x34, 0x0f, 0x59, 0xa2,
		0x1f, 0x07, 0xfa, 0x71, 0x00, 0x15, 0x41, 0x4b, 0xd1, 0x8f, 0x03, 0x46, 0x08, 0x23, 0x04, 0x35,
		0x05, 0x35, 0x05, 0x35, 0x05, 0x35, 0xdd, 0x31, 0x35, 0x45, 0xaf, 0x0e, 0x20, 0x20, 0x10, 0x10,
		0x08, 0x08, 0x04, 0x04, 0x02, 0xa2, 0x8f, 0x07, 0xfa, 0x78, 0x00, 0x0f, 0x91, 0x96, 0x41, 0x1f,
		0x0f, 0x98, 0x1f, 0xcc, 0x0f, 0x74, 0x14, 0x74, 0x14, 0x74, 0x14, 0x74, 0x14, 0x3d, 0x3e, 0x80,
		0x89, 0xc0, 0xc4, 0x63, 0xa3, 0xa4, 0xe8, 0xf1, 0x01, 0x13, 0x04, 0x2d, 0x05, 0x2d, 0x05, 0x2d,
		0x05, 0x2d, 0x45, 0xff, 0x8f, 0xb5, 0xbe, 0x71, 0x6b, 0xfd, 0x3f, 0xf4, 0xea, 0x7e, 0x48, 0x8a,
		0xde, 0x1f, 0xff, 0x39, 0xba, 0x43, 0x0e, 0x55, 0x4e, 0x8f, 0xec, 0x81, 0x7b, 0x5c, 0xf4, 0x92,
		0xd7, 0xd6, 0x2c, 0x74, 0x9a, 0x19, 0x83, 0x4a, 0x3e, 0x54, 0xf2, 0x65, 0x04, 0xeb, 0x26, 0x70,
		0xbe, 0xe8, 0x45, 0x75, 0x06, 0x99, 0xc1, 0xb7, 0x01, 0x8b, 0xb1, 0x81, 0xeb, 0xec, 0x60, 0xda,
		0x4a, 0x18, 0x99, 0xc0, 0xb2, 0x01, 0x1c, 0x5b, 0xc1, 0x70, 0x76, 0xf0, 0x9b, 0xa9, 0x8c, 0xcc,
		0xe0, 0x76, 0xe7, 0x1d, 0x3a, 0x5e, 0x19, 0x7c, 0x3a, 0x5d, 0xd8, 0xb4, 0x87, 0xcb, 0x35, 0x9e,
		0xc0, 0x12, 0x1e, 0x97, 0xbb, 0xbd, 0xc5, 0xd7, 0x9e, 0xff, 0x97, 0x17, 0x02, 0x88, 0xdd, 0x78,
		0xd2, 0xa8, 0x27, 0xbe, 0xf9, 0x8b, 0x5f, 0x7d, 0x70, 0x43, 0xf5, 0x46, 0xa9, 0xe5, 0x85, 0x9e,
		0xb1, 0xf1, 0xbf, 0xf3, 0x78, 0xec, 0x8f, 0x57, 0x74, 0x73, 0x8b, 0x55, 0x7f, 0xe6, 0x8a, 0xda,
		0x4d, 0xa3, 0x71, 0x75, 0xdd, 0x68, 0x54, 0xaf, 0x2f, 0xae, 0xab, 0xb7, 0x97, 0x97, 0xb5, 0xab,
		0xda, 0xe5, 0x92, 0x41, 0xbf, 0x49, 0x87, 0x4b, 0xee, 0xbc, 0x8d, 0x9f, 0x4a, 0x44, 0x9e, 0xb7,
		0xf6, 0xe1, 0x37, 0x7c, 0x35, 0xb3, 0xaf, 0xb5, 0xe4, 0x0b, 0x19, 0x7c, 0x99, 0xf9, 0xaf, 0x31,
		0x95, 0xf9, 0xf0, 0x4f, 0xa3, 0x07, 0x5f, 0xf5, 0xc0, 0x25, 0x37, 0xfc, 0x85, 0x7d, 0xe1, 0x7f,
		0x04, 0x81, 0x9a, 0xf5, 0x45, 0xcf, 0xaf, 0x9e, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x43, 0x14, 0x9b, 0x54, 0x14, 0xb1, 0x06, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interface/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_AdminState)(0)),
	},
	"/interface/breakout-mode/channel-speed": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed)(0)),
	},
	"/interface/ethernet/duplex-mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode)(0)),
	},
	"/interface/ethernet/physical-medium": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium)(0)),
	},
	"/interface/ethernet/port-speed": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed)(0)),
	},
	"/interface/ethernet/standby-signaling": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling)(0)),
	},
	"/interface/ethernet/storm-control/units": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units)(0)),
	},
	"/interface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_PortOperDownReason)(0)),
	},
	"/interface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_OperState)(0)),
	},
	"/interface/subinterface/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_AdminState)(0)),
	},
	"/interface/subinterface/anycast-gw/anycast-gw-mac-origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AnycastGwMacOrigin)(0)),
	},
	"/interface/subinterface/bridge-table/mac-duplication/action": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action)(0)),
	},
	"/interface/subinterface/bridge-table/mac-learning/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfacesBridgeTable_AdminState)(0)),
	},
	"/interface/subinterface/bridge-table/mac-learning/aging/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfacesBridgeTable_AdminState)(0)),
	},
	"/interface/subinterface/ipv4/address/origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AddressOrigin)(0)),
	},
	"/interface/subinterface/ipv4/address/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_Ipv4AddressStatus)(0)),
	},
	"/interface/subinterface/ipv6/address/origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AddressOrigin)(0)),
	},
	"/interface/subinterface/ipv6/address/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_Ipv6AddressStatus)(0)),
	},
	"/interface/subinterface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_SubifOperDownReason)(0)),
	},
	"/interface/subinterface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Subinterface_OperState)(0)),
	},
	"/interface/subinterface/type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_SiType)(0)),
	},
	"/interface/transceiver/connector-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType)(0)),
	},
	"/interface/transceiver/form-factor": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor)(0)),
	},
	"/interface/transceiver/forward-error-correction": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection)(0)),
	},
	"/interface/transceiver/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_TransceiverOperState)(0)),
	},
}

